* Emacs configuration

** Table of Contents                                                    :TOC_3_gh:
- [[#emacs-configuration][Emacs configuration]]
  - [[#helper-functions][Helper functions]]
  - [[#custom-hooks][Custom hooks]]
  - [[#baseline-setup][Baseline setup]]
  - [[#sane-editor-defaults][Sane editor defaults]]
  - [[#global-keybindings][Global keybindings]]
    - [[#setting-up-keys-for-macos][Setting up keys for macOS]]
    - [[#setting-up-a-custom-keymap][Setting up a custom keymap]]
    - [[#various-global-keybindings][Various global keybindings]]
  - [[#external-package-installation][External package installation]]
  - [[#make-it-pretty][Make it pretty]]
  - [[#utility-packages][Utility packages]]
    - [[#make-binaries-on-the-path-accessible-in-emacs][Make binaries on the =PATH= accessible in Emacs.]]
    - [[#remember-recent-files][Remember recent files.]]
    - [[#password-entry-in-minibuffer][Password entry in minibuffer]]
    - [[#editor-functionality][Editor functionality]]
    - [[#searching-and-finding-stuff][Searching and finding stuff]]
    - [[#project-management][Project management]]
    - [[#file-browsing][File browsing]]
    - [[#spellchecking][Spellchecking]]
    - [[#treemacs][Treemacs]]
  - [[#org-mode][Org-mode]]
    - [[#custom-variables][Custom variables]]
    - [[#helper-functions-1][Helper functions]]
    - [[#org-directory-and-file-definitions][Org directory and file definitions]]
    - [[#org-capture-configuration][Org-Capture configuration]]
    - [[#main-org-mode-configuration][Main org-mode configuration]]
    - [[#org-agenda-configuration][Org-agenda configuration]]
    - [[#add-extra-language-support-in-org-source-blocks][Add extra language support in org source blocks]]
    - [[#add-more-block-expansion-templates][Add more block expansion templates]]
    - [[#add-extra-exporting-options][Add extra exporting options]]
    - [[#customize-todo-keyword-sequence][Customize TODO keyword sequence]]
    - [[#customize-priorities][Customize PRIORITIES]]
    - [[#table-of-contents-generation][Table of contents-generation]]
    - [[#make-it-prettier][Make it prettier]]
    - [[#swedish-holidays][Swedish holidays]]
    - [[#capturing-outside-of-emacs][Capturing outside of emacs]]
    - [[#save-org-buffers-every-5-minutes][Save org buffers every 5 minutes]]
    - [[#google-calendar-integration][Google calendar integration]]
    - [[#trello-integration][Trello integration]]
  - [[#email-configuration][Email configuration]]
  - [[#erc][ERC]]
  - [[#programming][Programming]]
    - [[#lsp-mode][LSP mode]]
    - [[#web-development][Web development]]
    - [[#elm][Elm]]
    - [[#markdown][Markdown]]
    - [[#yaml][YAML]]
    - [[#python][Python]]
    - [[#rust][Rust]]
    - [[#terraform][Terraform]]
    - [[#graphviz-dot-mode][Graphviz Dot Mode]]
    - [[#java][Java]]
    - [[#sql][SQL]]
  - [[#load-theme][Load theme]]
  - [[#custom-commands][Custom commands]]
  - [[#loading-private-settings][Loading private settings]]

** Helper functions

Define helper functions needed for the rest of the configuration

#+begin_src emacs-lisp
  (defun iensu--config-file (file)
      "Take a configuration FILE name and return the full file path."
      (expand-file-name file user-emacs-directory))

  (defun iensu--connected-to-internet-p ()
    "Return t if able to connect to the internet."
      (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                         "www.google.com")))

  (defun iensu--assign-key-bindings (key-definitions &optional keymap)
    "Assign a list of KEY-DEFINITIONS, optionally to a KEYMAP."
    (dolist (key-def key-definitions)
      (if keymap
          (define-key keymap (kbd (car key-def)) (cdr key-def))
        (global-set-key (kbd (car key-def)) (cdr key-def)))))
#+end_src

** Custom hooks

#+begin_src emacs-lisp
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
#+end_src

** Baseline setup

Load credentials and secret stuff

#+begin_src emacs-lisp
  (load-file (iensu--config-file "credentials.el"))
#+end_src

Basic configuration which does not depend on any external packages.

#+begin_src emacs-lisp
  ;;  Maximize screen real estate by disabling menu-bar, tool-bar and scroll-bar
  (mapc
   (lambda (mode)
     (when (fboundp mode)
       (funcall mode -1)))
   '(menu-bar-mode tool-bar-mode scroll-bar-mode))

  ;; Enlarge the initial frame
  (setq initial-frame-alist '((width . 120)
                              (height . 60)))

  ;; Improve displayed buffer names
  (setq-default frame-title-format "%b (%f)"
                uniquify-buffer-name-style 'post-forward
                uniquify-separator ":")

  ;; Highlight current line
  (global-hl-line-mode 1)

  ;; Shorter confirmation prompts
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq default-directory "~/"
        custom-file (iensu--config-file "custom.el")

        gc-cons-threshold 100000000
        max-lisp-eval-depth 2000

        inhibit-startup-message t
        ring-bell-function 'ignore
        confirm-kill-emacs 'y-or-n-p

        create-lockfiles nil
        auto-save-default nil

        backup-directory-alist `(("." . ,(iensu--config-file ".local/.saves")))
        backup-by-copying t
        delete-old-versions t
        kept-new-versions 6

        calendar-week-start-day 1

        vc-follow-symlinks t

        url-configuration-directory (iensu--config-file ".local/url")

        image-dired-dir (iensu--config-file ".local/image-dired")
        bookmark-default-file (iensu--config-file ".local/bookmarks")
        tramp-auto-save-directory (iensu--config-file ".local/tramp")

        ;; Need to setup identity using `gpg --gen-key` before using gpg
        ;; on Mac install pinentry-mac from homebrew
        ;; https://www.gnupg.org/software/pinentry/index.html
        auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc")
        epa-pinentry-mode 'loopback)

  ;; use default browser for browsing stuff
  (setq browse-url-browser-function 'browse-url-default-browser)

  (setq compilation-scroll-output t)
#+end_src

** Sane editor defaults

Set actual editor defaults to be more in line with expectations.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2

                fill-column 80

                require-final-newline t

                sentence-end-double-space nil

                word-wrap t
                truncate-lines t

                scroll-conservatively 0
                scroll-step 4
                next-screen-context-lines 20)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (delete-selection-mode 1)

  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)

  ;; defaults for programming modes
  (add-hook 'prog-mode-hook
            (lambda ()
              (subword-mode 1)
              (column-number-mode 1)
              (display-line-numbers-mode)
              (eldoc-mode 1)
              (show-paren-mode 1)))

  ;; Open eshell and shell buffers in popup windows
  (setq display-buffer-alist '(("\\`\\*e?shell" display-buffer-pop-up-window)))
#+end_src

Start the emacsclient server.

#+begin_src emacs-lisp
  (server-start)
#+end_src

** Global keybindings

*** Setting up keys for macOS

Set the command button to be =meta= (=M=).

#+begin_src emacs-lisp
  (setq mac-command-modifier 'meta)
#+end_src

Unset the option key (=meta= by default) to allow it to be used for typing
extra characters.

#+begin_src emacs-lisp
  (setq mac-option-modifier 'none)
#+end_src

Set the right option modifier to =hyper= which gives us more keybindings to work with.

#+begin_src emacs-lisp
  (setq mac-right-option-modifier 'hyper)
#+end_src

On macOS, remember to disable the built-in dictionary lookup command (=C-M-d=)
by running the following command followed by a restart of the computer:

#+begin_src shell :eval never
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70 '<dict><key>enabled</key><false/></dict>'
#+end_src

*** Setting up a custom keymap

Create a custom =keymap= and assign it to =H-1=.

#+begin_src emacs-lisp
  (define-prefix-command 'iensu-map)
  (global-set-key (kbd "H-1") 'iensu-map)
  (global-set-key (kbd "C-Ã¥") 'iensu-map)
#+end_src

*** Various global keybindings

Add a bunch of globally applied keybindings.

#+begin_src emacs-lisp
  (iensu--assign-key-bindings '(("C-<backspace>" . delete-indentation)
                                ("C-h C-s"       . iensu/toggle-scratch-buffer)
                                ("C-x C-b"       . ibuffer)
                                ("M-<backspace>" . fixup-whitespace)
                                ("M-i"           . imenu)
                                ("M-o"           . occur)))

  (iensu--assign-key-bindings '(("0"   . iensu/update-mail-in-background)
                                ("2"   . mu4e)
                                ("9"   . iensu/refresh-work-calendar)
                                ("c"   . mu4e-compose-new)
                                ("d"   . iensu/duplicate-line)
                                ("e f" . iensu/erc-freenode)
                                ("f"   . other-frame)
                                ("F"   . make-frame)
                                ("i"   . iensu/open-init-file)
                                ("k"   . delete-frame)
                                ("m"   . mu4e-headers-search)
                                ("n t" . iensu/npm-test)
                                ("p"   . list-processes)
                                ("P"   . iensu/project-todo-list)
                                ("s"   . deadgrep)
                                ("t"   . toggle-truncate-lines)
                                ("u"   . revert-buffer)
                                ("Ã¥"   . iensu/eshell))
                              'iensu-map)
#+end_src

Enable window (visible buffer) navigation with =<shift>-<direction>=.

#+begin_src emacs-lisp
  (windmove-default-keybindings)

  ;; Resolve org-mode conflicts
  (setq org-replace-disputed-keys t)
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src

** External package installation

Setup =package.el= and =use-package= for clean package installation.

#+begin_src emacs-lisp
  ;; --- Setting up package.el
  (require 'package)

  (setq package-archives
        '(("gnu"   . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))

  (when (not (string-prefix-p "27" emacs-version))
    (package-initialize))

  ;; --- Setting up use-package.el
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t))
#+end_src

** Make it pretty

#+begin_src emacs-lisp
  ;; Fix titlebar on MacOS
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearence . dark))

  ;; --- Modeline cleanup
  (use-package delight
    :config
    (delight 'global-auto-revert-mode nil t)
    (delight 'auto-revert-mode nil t))

  (use-package diminish
    :init
    (add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name "EÎ»")))
    (add-hook 'lisp-interaction-mode (lambda () (setq mode-name "Î»")))
    (add-hook 'js2-mode-hook (lambda () (setq mode-name "js2"))))

  (use-package rainbow-delimiters :delight)

  (use-package all-the-icons)

  (use-package emojify
    :init
    (add-hook 'text-mode-hook 'emojify-mode)
    (add-hook 'org-mode-hook 'emojify-mode)
    (setq emojify-emojis-dir (iensu--config-file ".local/emojis")))

  (global-prettify-symbols-mode 1)
  (global-font-lock-mode 1)

  (setq-default cursor-type '(bar . 2))
#+end_src

** Utility packages

*** Make binaries on the =PATH= accessible in Emacs.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize))
#+end_src

*** Remember recent files.

#+begin_src emacs-lisp
    (defun iensu--recentf-hook ()
      (add-to-list 'recentf-exclude (iensu--config-file ".local/recentf"))
      (setq recentf-save-file (iensu--config-file ".local/recentf")
            recentf-max-menu-items 50)
      (recentf-load-list))

    (use-package recentf
      :init
      (recentf-mode 1)
      (add-hook 'recentf-mode-hook #'iensu--recentf-hook))
#+end_src

*** Password entry in minibuffer

#+begin_src emacs-lisp
  (use-package pinentry :init (pinentry-start))
#+end_src

*** Editor functionality

#+begin_src emacs-lisp
  (use-package editorconfig
    :delight
    :init
    (add-hook 'prog-mode-hook (editorconfig-mode 1))
    (add-hook 'text-mode-hook (editorconfig-mode 1)))

  (use-package multiple-cursors
    :bind
    (("M-="           . mc/edit-lines)
     ("C-S-<right>"   . mc/mark-next-like-this)
     ("C-S-<left>"    . mc/mark-previous-like-this)
     ("C-S-<mouse-1>" . mc/add-cursor-on-click))
    :init
    (setq mc/list-file (iensu--config-file ".local/.mc-lists.el")))

  (use-package expand-region
    :bind
    (("C-=" . er/expand-region)
     ("C-M-=" . er/contract-region)))

  (use-package iedit)

  (use-package smartparens
    :init
    (require 'smartparens-config)
    :bind (:map smartparens-mode-map
                ("M-s"       . sp-unwrap-sexp)
                ("C-<down>"  . sp-down-sexp)
                ("C-<up>"    . sp-up-sexp)
                ("M-<down>"  . sp-backward-down-sexp)
                ("M-<up>"    . sp-backward-up-sexp)
                ("C-<right>" . sp-forward-slurp-sexp)
                ("M-<right>" . sp-forward-barf-sexp)
                ("C-<left>"  . sp-backward-slurp-sexp)
                ("M-<left>"  . sp-backward-barf-sexp))
    :hook ((prog-mode . smartparens-mode)
           (repl-mode . smartparens-strict-mode)
           (lisp-mode . smartparens-strict-mode)
           (emacs-lisp-mode . smartparens-strict-mode)))

  (use-package undo-tree
    :delight
    :init (global-undo-tree-mode))
#+end_src

*** Searching and finding stuff

#+begin_src emacs-lisp
  (use-package smex
    :init
    (smex-initialize))
#+end_src

#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src

#+begin_src emacs-lisp
  (use-package wgrep
    :init
    (autoload 'wgrep-ag-setup "wgrep-ag")
    (add-hook 'ag-mode-hook 'wgrep-ag-setup))

  (use-package wgrep-ag)
#+end_src

**** Ivy|Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :delight ivy-mode
    :init
    (ivy-mode 1)
    :bind (("C-s"     . swiper)
           ("M-x"     . counsel-M-x)
           ("C-x C-f"	. counsel-find-file)
           ("C-x C-r" . counsel-recentf)
           ("<f1> f"	. counsel-describe-function)
           ("<f1> v"	. counsel-describe-variable)
           ("<f1> l"	. counsel-find-library)
           ("<f2> i"	. counsel-info-lookup-symbol)
           ("<f2> u"	. acounsel-unicode-char)
           ("C-c k"   . counsel-ag)
           ("C-x l"   . counsel-locate)
           ("C-x b"   . ivy-switch-buffer)
           ("M-y"     . counsel-yank-pop)
           :map ivy-minibuffer-map
           ("M-y"     . ivy-next-line))
    :config
    (setq ivy-use-virtual-buffers t
          ivy-use-selectable-prompt t
          ivy-count-format "(%d/%d) "
          ivy-magic-slash-non-match-action 'ivy-magic-non-match-create
          counsel-ag-base-command "ag --nocolor --nogroup --hidden %s"))

  ;; As of 2019-10-12 border colors on child frames is not working on macos...
  (defun iensu--load-ivy-posframe ()
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center))
          ivy-posframe-width 70
          ivy-posframe-parameters '((left-margin-width . 10)
                                    (right-margin-width . 10)
                                    (internal-border-width . 2)
                                    (internal-border-color . "white")))
    (ivy-posframe-mode 1)
    (set-face-attribute 'ivy-posframe nil :background "grey16"))

  (use-package ivy-posframe
    :ensure t
    :delight
    :hook
    (after-load-theme . iensu--load-ivy-posframe))

  (use-package ivy-prescient
    :ensure t
    :delight
    :config
    (prescient-persist-mode))
#+end_src

*** Project management

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status))
    :config
    (setq magit-bury-buffer-function 'quit-window))

  (use-package projectile
    :delight '(:eval (let ((project-name (projectile-project-name)))
                       (if (string-equal project-name "-")
                           ""
                         (concat " <" project-name ">"))))
    :init
    (setq projectile-cache-file (iensu--config-file ".local/projectile.cache")
          projectile-known-projects-file (iensu--config-file ".local/projectile-bookmarks.eld")
          projectile-git-submodule-command nil)
    :config
    (projectile-global-mode)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-sort-order 'access-time)
    (let ((ignored-files '(".DS_Store" ".projectile")))
      (dolist (file ignored-files)
        (add-to-list 'projectile-globally-ignored-files file))))

  (use-package forge
    :ensure t
    :after magit)

  (use-package counsel-projectile :init (counsel-projectile-mode 1))
#+end_src

*** File browsing

#+begin_src emacs-lisp
  (use-package dired+
    :load-path (lambda () (iensu--config-file "packages"))
    :config
    (when (executable-find "gls") ;; native OSX ls works differently then GNU ls
      (setq insert-directory-program "/usr/local/bin/gls"))
    (setq dired-listing-switches "-alGh --group-directories-first"
          dired-dwim-target t))

  (use-package dired-subtree
    :config
    (bind-keys :map dired-mode-map
               ("<tab>" . dired-subtree-insert)
               ("<backtab>" . dired-subtree-remove)))
#+end_src

*** Spellchecking

#+begin_src emacs-lisp
  (use-package flyspell
    :delight
    '(:eval (concat " FlyS:" (or ispell-local-dictionary ispell-dictionary)))
    :bind
    (:map flyspell-mode-map
          ("C-Ã¥ l" . iensu/cycle-ispell-dictionary)
          ("C-:" . flyspell-popup-correct))
    :config
    (when (executable-find "aspell")
      (setq ispell-program-name "aspell"
            ispell-extra-args '("--sug-mode=ultra")
            ispell-list-command "--list"))
    (setq ispell-dictionary "en_US"))

  (use-package flyspell-popup
    :delight)

  (use-package synosaurus
    :config
    (setq synosaurus-backend 'synosaurus-backend-wordnet
          synosaurus-choose-method 'popup))

  (defun iensu/text-editing-support ()
    "Sets up text editing nicities such as spell-check and thesaurus"
    (interactive)
    (flyspell-mode 1)
    (synosaurus-mode 1))

  (add-hook 'text-mode-hook #'iensu/text-editing-support)

  (defvar iensu--language-ring nil)

  (let ((languages '("swedish" "en_US")))
    (setq iensu--language-ring (make-ring (length languages)))
    (dolist (elem languages) (ring-insert iensu--language-ring elem)))

  (defun iensu/cycle-ispell-dictionary ()
    (interactive)
    (let ((language (ring-ref iensu--language-ring -1)))
      (ring-insert iensu--language-ring language)
      (ispell-change-dictionary language)
      (message (format "Switched to dictionary: %s" language))))
#+end_src

*** Treemacs

#+begin_src emacs-lisp
  (use-package winum
    :ensure t)

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)
          ("C-x t w"   . treemacs-switch-workspace)))

  (use-package treemacs-magit
    :ensure t
    :after treemacs magit)
#+end_src

** Org-mode

*** Custom variables

#+begin_src emacs-lisp
  (defvar iensu-org-dir)
  (defvar iensu-org-files-alist)
  (defvar iensu-org-refile-targets)
  (defvar iensu-org-agenda-files)
  (defvar iensu-org-capture-templates-alist)
#+end_src

*** Helper functions

#+begin_src emacs-lisp
  (defun iensu--org-remove-file-if-match (&rest regexes)
    "Return a list of org file entries from `iensu-org-files-alist' not matching REGEXES."
    (let ((regex (string-join regexes "\\|")))
      (cl-remove-if (lambda (file) (string-match regex file))
                    (mapcar 'cadr iensu-org-files-alist))))

  (defun iensu/org-save-buffers ()
    "Saves all org buffers."
    (interactive)
    (save-some-buffers 'no-confirm
                       (lambda ()
                         (string-match-p
                          (expand-file-name org-directory)
                          (buffer-file-name (current-buffer)))))
    (message "Saved org buffers..."))

  (defun iensu-org-file (key)
        "Return file path for org file matching KEY. KEY must be in `iensu-org-files-alist'."
        (cadr (assoc key iensu-org-files-alist)))
#+end_src

*** Org directory and file definitions

#+begin_src emacs-lisp
  (setq iensu-org-dir "~/Dropbox/org")

  (setq iensu-org-files-alist
        `((appointments     ,(concat iensu-org-dir "/appointments.org"))
          (books            ,(concat iensu-org-dir "/books.org"))
          (work-calendar    ,(concat iensu-org-dir "/calendars/work.org"))
          (ekonomi          ,(concat iensu-org-dir "/ekonomi.org"))
          (journal          ,(concat iensu-org-dir "/journal.org.gpg"))
          (music            ,(concat iensu-org-dir "/music.org"))
          (notes            ,(concat iensu-org-dir "/notes.org"))
          (private          ,(concat iensu-org-dir "/private.org"))
          (projects         ,(concat iensu-org-dir "/projects.org"))
          (refile           ,(concat iensu-org-dir "/refile.org"))
          (richard          ,(concat iensu-org-dir "/richard.org"))
          (work             ,(concat iensu-org-dir "/work.org"))))

  (setq iensu-org-refile-targets
        (iensu--org-remove-file-if-match "calendars"
                                         "journal"
                                         "appointments"
                                         "refile"))

  (setq org-archive-location "archive/%s_archive::")
#+end_src

*** Org-Capture configuration

Enables capturing to file in the project root =<PROJECT-ROOT>/.project-notes.org=.

#+begin_src emacs-lisp
  (defvar iensu-org-capture-project-notes-file)

  (defun iensu/set-org-capture-project-notes-file (&rest args)
    (let ((root-dir (projectile-project-root)))
      (setq iensu-org-capture-project-notes-file (concat root-dir ".project-notes.org"))))

  (advice-add 'org-capture :before 'iensu/set-org-capture-project-notes-file)
#+end_src

Setup capture templates.

#+begin_src emacs-lisp
  (setq iensu-org-capture-templates-alist
        `(("t" "TODO" entry (file ,(iensu-org-file 'refile))
           ,(concat "* TODO %?\n"
                    "%U\n"
                    "%a\n")
           :clock-in t :clock-resume t)

          ("j" "Journal" entry (file+datetree ,(iensu-org-file 'journal))
           ,(concat "* %^{Location|Stockholm, Sweden}\n"
                    "%U\n\n"
                    "%?\n"))

          ("l" "Link" entry (file ,(iensu-org-file 'refile))
           ,(concat "* %? %^L %^G \n"
                    "%U\n")
           :prepend t)

          ("L" "Browser Link" entry (file ,(iensu-org-file 'refile))
           ,(concat "* TODO %a\n"
                    "%U\n")
           :prepend t :immediate-finish t)

          ("p" "Browser Link and Selection" entry (file ,(iensu-org-file 'refile))
           ,(concat "* TODO %^{Title}\n"
                    "Source: %u, %c\n"
                    "#+BEGIN_QUOTE\n"
                    "%i\n"
                    "#+END_QUOTE\n\n\n%?")
           :prepend t)

          ("m" "Project note" entry (file+headline iensu-org-capture-project-notes-file "Notes")
           ,(concat "* %^{Title}\n"
                    "%U\n\n"
                    "%?\n\n"))

          ("n" "Project note with link" entry (file+headline iensu-org-capture-project-notes-file "Notes")
           ,(concat "* %^{Title}\n"
                    "%U\n\n"
                    "Link: %a\n\n"
                    "%?\n\n"))

          ("N" "Project note with link + quote" entry (file+headline iensu-org-capture-project-notes-file "Notes")
           ,(concat "* %^{Title}\n"
                    "%U\n\n"
                    "Link: %a\n"
                    "#+BEGIN_QUOTE\n"
                    "%i\n"
                    "#+END_QUOTE\n\n"
                    "%?\n\n"))

          ("a" "Appointment" entry (file ,(iensu-org-file 'appointments))
           ,(concat "* %^{title} %^G\n"
                    "SCHEDULED: %^T\n\n"
                    "%?\n"))

          ("b" "Book" entry (file+headline ,(iensu-org-file 'books) "LÃ¤slista")
           ,(concat "* %^{STATE|TODO|DONE} %^{} <%^{}> %^g\n\n"))))

  (setq org-capture-templates iensu-org-capture-templates-alist)
#+end_src

*** Main org-mode configuration

#+begin_src emacs-lisp
  (defun iensu--org-mode-hook ()
    (dolist (lang-mode '(("javascript" . js2) ("es" . es)))
      (add-to-list 'org-src-lang-modes lang-mode))
    (auto-fill-mode nil)
    (visual-line-mode 1)
    (setq org-src-fontify-natively t
          org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
          truncate-lines t
          org-image-actual-width nil
          line-spacing 1
          outline-blank-line t
          org-adapt-indentation nil
          org-fontify-quote-and-verse-blocks t
          org-fontify-done-headline t
          org-fontify-whole-heading-line t
          org-hide-leading-stars t
          org-indent-indentation-per-level 2
          org-checkbox-hierarchical-statistics nil
          org-log-done 'time
          org-outline-path-complete-in-steps nil
          org-html-htmlize-output-type 'css
          org-export-initial-scope 'subtree
          org-catch-invisible-edits 'show-and-error))

  (use-package org
    :delight
    (org-mode "\u2658" :major)
    :bind (("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           :map org-mode-map
           ("H-."   . org-time-stamp-inactive))
    :config
    (add-hook 'org-mode-hook 'iensu--org-mode-hook)
    (add-hook 'org-mode-hook #'iensu/text-editing-support)

    (org-load-modules-maybe t)

    (setq org-default-notes-file (iensu-org-file 'notes)
          org-directory iensu-org-dir
          org-refile-targets '((iensu-org-refile-targets :maxlevel . 4))
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-use-outline-path 'file
          org-latex-listings t
          org-cycle-separator-lines 1))
#+end_src

*** Org-agenda configuration

#+begin_src emacs-lisp
  (require 'org-agenda)

  (setq iensu-org-agenda-files
        (iensu--org-remove-file-if-match "\\.org\\.gpg"))

  (dolist (file-name (cl-remove-if-not
                      (lambda (fname) (string-match-p "^work\\..+\\.org$" fname))
                      (directory-files iensu-org-dir)))
    (let ((file (expand-file-name file-name iensu-org-dir)))
      (add-to-list 'iensu-org-agenda-files file)
      (add-to-list 'org-refile-targets `(,file :maxlevel . 3))))

  (dolist (agenda-command
           '(("z" "Two week agenda"
              ((todo ""
                     ((org-agenda-overriding-header "TODOs")
                      (org-agenda-prefix-format "  ")
                      (org-agenda-sorting-strategy '(priority-down deadline-up))
                      (org-agenda-max-entries 20)))
               (agenda ""
                       ((org-agenda-start-day "0d")
                        (org-agenda-span 14)
                        (org-agenda-start-on-weekday nil)))))))
    (add-to-list 'org-agenda-custom-commands agenda-command))

  (setq org-agenda-files iensu-org-agenda-files
        org-agenda-dim-blocked-tasks nil
        org-deadline-warning-days -7
        org-agenda-block-separator "")
#+end_src

**** Project-based TODO lists

Create a TODO list based on TODO items in a project's =.project-notes.org= file.
The =org-agenda-files= variable is temporarily set the only the project notes
file and then reverted back to its previous value upon closing the TODO list buffer.

#+begin_src emacs-lisp
  (defvar iensu--project-agenda-buffer-name "*Project Agenda*")

  (defun iensu/project-todo-list ()
    (interactive)
    (let ((project-notes-file (expand-file-name ".project-notes.org"
                                                (projectile-project-root))))
      (if (file-exists-p project-notes-file)
          (progn
            (setq org-agenda-files `(,project-notes-file))
            (org-todo-list)
            (rename-buffer iensu--project-agenda-buffer-name 'unique))
        (message "Could not locate any project notes file"))))

  (defun iensu/reset-org-agenda-files ()
    (interactive)
    (when (string-equal iensu--project-agenda-buffer-name
                        (buffer-name (current-buffer)))
      (setq org-agenda-files iensu-org-agenda-files)))

  ;; Reset org-agenda-files when the project TODO list buffer is closed
  (add-hook 'kill-buffer-hook #'iensu/reset-org-agenda-files)
#+end_src

*** Add extra language support in org source blocks

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (shell . t)
                               (js . t)
                               (python . t)
                               (dot . t)))

  ;; Add support for YAML files
  (defun org-babel-execute:yaml (body params) body)
#+end_src

*** Add more block expansion templates

#+begin_src emacs-lisp
  (let ((additional-org-templates (if (version< (org-version) "9.2")
                                      '(("ssh" "#+begin_src shell \n?\n#+end_src")
                                        ("sel" "#+begin_src emacs-lisp \n?\n#+end_src"))
                                    '(("ssh" . "src shell")
                                      ("sel" . "src emacs-lisp")))))
    (dolist (template additional-org-templates)
      (add-to-list 'org-structure-template-alist template)))
#+end_src

*** Add extra exporting options

#+begin_src emacs-lisp
  ;; presentations using LaTeX
  (require 'ox-beamer)
  ;; standard markdown
  (require 'ox-md)
  ;; Github-flavoured markdown
  (use-package ox-gfm
    :init
    (eval-after-load "org"
      '(require 'ox-gfm nil t)))
#+end_src

*** Customize TODO keyword sequence

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(d!)" "BLOCKED(b@/!)"
                    "|"
                    "CANCELED(C@/!)" "POSTPONED(P@/!)" "DONE(D@/!)")))

  (setq org-todo-keyword-faces
        '(("BLOCKED"   . (:foreground "#dd0066" :weight bold))
          ("CANCELED" . (:foreground "#6272a4"))
          ("POSTPONED" . (:foreground "#3388ff"))))
#+end_src

*** Customize PRIORITIES

#+begin_src emacs-lisp
  (setq org-highest-priority ?A
        org-default-priority ?D
        org-lowest-priority  ?E)
#+end_src

*** Table of contents-generation

Automatically generate Table of Contents entries for the current org file under
headings marked with a =:TOC:= tag.

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

*** Make it prettier

Make view more compact

#+begin_src emacs-lisp
  (setq org-cycle-separator-lines 0)
#+end_src

Only display one bullet per headline for a cleaner look.

#+begin_src
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :config
    (setq org-bullets-bullet-list '("*")))
#+end_src

#+begin_src emacs-lisp
  (defun iensu--org-mode-restyle ()
    ; Make all headlines have the same size and weight
    (dolist (heading-num (number-sequence 1 8))
      (set-face-attribute (intern (format "org-level-%d" heading-num))
                          nil
                          :height 1.2
                          :weight 'bold))
    ; Style org blocks
    (set-face-attribute 'org-block-begin-line nil :height 120)
    (set-face-attribute 'org-meta-line        nil :height 120)
    ; Other font styles
    (set-face-attribute 'org-headline-done nil :strike-through nil :foreground "#cccccc"))

  (add-hook 'after-load-theme-hook #'iensu--org-mode-restyle)
#+end_src

Clean-up agenda view

#+begin_src emacs-lisp
  (setq org-agenda-prefix-format
        '((agenda . "   %?-12t    % s")
          (todo . " %i %-12:c")
          (tags . " %i %-12:c")
          (search . " %i %-12:c")))
#+end_src

*** Swedish holidays

Update the calendar to contain Swedish holidays etc.

#+begin_src emacs-lisp
  (load-file (iensu--config-file "packages/kalender.el"))
#+end_src

*** Capturing outside of emacs

=org-protocol= enables capturing from outside of Emacs.

#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src

#+begin_src emacs-lisp
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
#+end_src

*** Save org buffers every 5 minutes

#+begin_src emacs-lisp
  (defvar iensu--timer:org-save-buffers nil
    "Org save buffers timer object. Can be used to cancel the timer.")

  (setq iensu--timer:org-save-buffers
        (run-at-time t (* 5 60) #'iensu/org-save-buffers))
#+end_src

*** Google calendar integration

Stores google calendar events to my org =work-calendar= file. Sync by running
=M-x org-gcal-sync=.

#+begin_src emacs-lisp
  (use-package org-gcal
    :init
    (setq org-gcal-token-file (iensu--config-file ".local/org-gcal/org-gcal-token")
          org-gcal-dir (iensu--config-file ".local/org-gcal/"))
    :config
    (setq org-gcal-client-id *user-gcal-client-id*
          org-gcal-client-secret *user-gcal-client-secret*
          org-gcal-file-alist `(("jens.ostlund@futurice.com" . ,(iensu-org-file 'work-calendar)))))
#+end_src

*** Trello integration

#+begin_src emacs-lisp
  (use-package org-trello)

  (defun iensu/org-trello-sync-buffer ()
    (interactive)
    (org-trello-sync-buffer 'from-trello))

  (defun iensu/org-trello-sync-card ()
    (interactive)
    (org-trello-sync-card 'from-trello))

  (defun iensu/org-trello-sync-comment ()
    (interactive)
    (org-trello-sync-comment 'from-trello))
#+end_src


** Email configuration

#+begin_src emacs-lisp
  (defvar iensu--timer:mail-updates nil
    "Mail updates timer object. Can be used to cancel the recurring updates.")

  (defun iensu--render-html-message ()
    (let ((dom (libxml-parse-html-region (point-min) (point-max))))
      (erase-buffer)
      (shr-insert-document dom)
      (goto-char (point-min))))

  (defun iensu--mu4e-setup ()
    (setq mail-user-agent 'mu4e-user-agent
          mu4e-mu-binary "/usr/local/bin/mu"

          mu4e-maildir "~/Mail"
          mu4e-maildir-shortcuts
          '(("/futurice/All mail" . ?F)
            ("/private/All mail" . ?P))

          mu4e-sent-messages-behavior 'delete

          mu4e-context-policy 'pick-first
          mu4e-confirm-quit nil
          message-kill-buffer-on-exit t

          mu4e-get-mail-command "offlineimap"

          mu4e-view-show-images t
          mu4e-show-images t
          mu4e-view-image-max-width 800

          mu4e-compose-format-flowed t
          mu4e-view-show-addresses t

          mu4e-headers-fields '((:human-date . 12)
                                (:flags . 6)
                                (:tags . 16)
                                (:from . 22)
                                (:subject))

          mu4e-compose-context-policy 'ask-if-none
          mu4e-contexts
          `(,(make-mu4e-context
              :name "Futurice"
              :enter-func (lambda () (mu4e-message "Entering Futurice context"))
              :leave-func (lambda () (setq mu4e-maildir-list nil)) ; forces refresh of address list when switching context
              :match-func (lambda (msg)
                            (when msg
                              (string-match-p "^/futurice" (mu4e-message-field msg :maildir))))
              :vars '((mu4e-sent-folder   . "/futurice/sent")
                      (mu4e-drafts-folder . "/futurice/drafts")
                      (mu4e-trash-folder  . "/futurice/trash")

                      (user-mail-address  . "jens.ostlund@futurice.com")
                      (user-full-name     . "Jens Ãstlund")

                      (smtpmail-smtp-user . "jens.ostlund@futurice.com")))

            ,(make-mu4e-context
              :name "Private"
              :enter-func (lambda () (mu4e-message "Entering Private context"))
              :leave-func (lambda () (setq mu4e-maildir-list nil)) ; forces refresh of address list when switching context
              :match-func (lambda (msg)
                            (when msg
                              (string-match-p "^/private" (mu4e-message-field msg :maildir))))
              :vars '((mu4e-sent-folder   . "/private/sent")
                      (mu4e-drafts-folder . "/private/drafts")
                      (mu4e-trash-folder  . "/private/trash")

                      (user-mail-address  . "jostlund@gmail.com")
                      (user-full-name     . "Jens Ãstlund")

                      (smtpmail-smtp-user . "jostlund")))))

    (add-to-list 'mu4e-view-actions '("EWW" . iensu--mu4e-view-in-eww) t)
    (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

    ;; message viewing settings
    (add-hook 'mu4e-view-mode-hook
              (lambda ()
                (visual-line-mode)
                (local-set-key (kbd "<tab>") 'shr-next-link)
                (local-set-key (kbd "<backtab>") 'shr-previous-link)))
    (setq shr-color-visible-luminance-min 20))

  (defun iensu--send-email-setup ()
    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 465
          smtpmail-stream-type 'ssl
          smtpmail-debug-info t))

  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'mu4e-compose-mode-hook #'iensu/text-editing-support)
  (add-hook 'mu4e-compose-mode-hook (lambda () (auto-fill-mode -1)))

  (setq user-mail-address "jens.ostlund@futurice.com"
        user-full-name "Jens Ãstlund")

  (let ((mu4e-path "/usr/local/share/emacs/site-lisp/mu/mu4e"))
    (when (and (executable-find "mu")
               (file-directory-p mu4e-path))
      (add-to-list 'load-path mu4e-path)
      (require 'mu4e)
      (eval-after-load "mu4e"
        (progn
          (iensu--mu4e-setup)
          (iensu--send-email-setup)
          (setq iensu--timer:mail-updates
                (run-at-time t (* 35 60) #'iensu/update-mail-in-background))))))

  (use-package mu4e-alert
    :after mu4e
    :init
    (mu4e-alert-set-default-style 'notifier)
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications))

  (use-package org-mu4e :ensure nil)

  ;; sending html emails
  (use-package htmlize)
  (use-package org-mime
    :load-path (lambda () (iensu--config-file "packages"))
    :init
    (require 'org-mime)
    (setq org-mime-library 'mml)
    :config
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#E6E1DC" "#232323"))))
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))))
#+end_src

Unblock offlineimap before fetching email

#+begin_src emacs-lisp
  (advice-add 'mu4e-update-mail-and-index :before 'iensu/unblock-offlineimap)
#+end_src

** ERC

#+begin_src emacs-lisp
  (require 'erc)

  (defun iensu/erc-freenode ()
    (interactive)
    (erc :server "irc.freenode.net" :port 6667 :nick *erc-nick*))

  (setq erc-prompt-for-password nil
        erc-fill-function 'erc-fill-static
        erc-fill-static-center 22
        erc-autojoin-channels-alist '(("freenode.net" "#emacs"))
        erc-join-buffer 'bury
        erc-autojoin-timing 'ident
        erc-server-reconnect-attempts 5
        erc-server-reconnect-timeout 3)

  (add-to-list 'erc-modules 'spelling)
  (erc-update-modules)

  ;; Send message with C-RET instead of just RET
  (define-key erc-mode-map (kbd "RET") nil)
  (define-key erc-mode-map (kbd "C-<return>") 'erc-send-current-line)

  (use-package erc-hl-nicks :after erc)

  (use-package erc-image :after erc)
#+end_src

** Programming

Setup autocompletion.

#+begin_src emacs-lisp
    (use-package company
      :delight
      :init (global-company-mode)
      :config
      (setq company-idle-delay 0.3
            company-minimum-prefix-length 2
            company-selection-wrap-around t
            company-auto-complete t
            company-tooltip-align-annotations t
            company-dabbrev-downcase nil
            company-auto-complete-chars nil)
      (add-hook 'emacs-lisp-mode-hook
                (lambda ()
                  (add-to-list 'company-backends 'company-elisp)))
      (eval-after-load 'company (company-quickhelp-mode 1)))

    (use-package company-quickhelp
      :config
      (setq company-quickhelp-delay 1)
      (define-key company-active-map (kbd "M-h") #'company-quickhelp-manual-begin))
#+end_src

Setup snippet expansions.

#+begin_src emacs-lisp
  (use-package yasnippet
    :delight yas-minor-mode
    :init
    (yas-global-mode 1)
    (setq yas-snippet-dirs (add-to-list 'yas-snippet-dirs (iensu--config-file "snippets")))
    :config
    (add-hook 'snippet-mode-hook (lambda ()
                                   (setq mode-require-final-newline nil
                                         require-final-newline nil))))
#+end_src

Setup flycheck for on the fly linting.

#+begin_src emacs-lisp
    (use-package flycheck
      :init
      (global-flycheck-mode t)
      :config
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

    (use-package flycheck-popup-tip
      :init
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook 'flycheck-popup-tip-mode)))
#+end_src

*** LSP mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :bind
    :config
    (setq lsp-prefer-flymake nil))

  (use-package lsp-ui :ensure tq
    :init
    (setq lsp-ui-doc-delay 1
          lsp-ui-doc-border "violet"
          lsp-ui-doc-position 'at-point
          lsp-ui-doc-use-webkit t
          lsp-ui-doc-max-width 50
          lsp-ui-sideline-delay 0.5
          lsp-ui-sideline-enable t
          lsp-ui-flycheck-enable t)
    ;; Disable flyckeck-popup if lsp-ui-mode is enabled
    (add-hook 'lsp-ui-mode-hook (lambda () (flycheck-popup-tip-mode -1))))

  (use-package company-lsp
    :commands company-lsp)

  (use-package lsp-treemacs)

  (use-package lsp-ivy)
#+end_src

*** Web development

**** General

#+begin_src emacs-lisp
  (use-package emmet-mode
    :config
    (add-hook 'emmet-mode-hook
              (lambda ()
                (when (or (string-suffix-p ".jsx" (buffer-name))
                          (string-suffix-p ".tsx" (buffer-name)))
                  (setq emmet-expand-jsx-className? t)))))

  (defun iensu/use-prettier ()
    (let ((project-root (locate-dominating-file (or (buffer-file-name) default-directory)
                                                "package.json")))
      (and (executable-find "prettier")
           (or (file-exists-p (expand-file-name ".prettierrc" project-root))
               (file-exists-p (expand-file-name ".prettierrc.json" project-root))))))

  (use-package add-node-modules-path
    :load-path (lambda () (iensu--config-file "packages")))

  (use-package prettier-js
    :load-path (lambda () (iensu--config-file "packages"))
    :requires add-node-modules-path
    :config
    (cl-flet ((maybe-use-prettier ()
                                  (add-node-modules-path)
                                  (when (iensu/use-prettier)
                                    (prettier-js-mode 1)
                                    (remove-hook 'before-save-hook #'tide-format-before-save t))))
      (add-hook 'web-mode-hook  #'maybe-use-prettier)
      (add-hook 'js2-mode-hook  #'maybe-use-prettier)
      (add-hook 'tide-mode-hook #'maybe-use-prettier)))

  (use-package json-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
    (setq js-indent-level 2))

  (use-package restclient
    :init
    (add-to-list 'auto-mode-alist '("\\.rest$" . restclient-mode))
    (add-to-list 'auto-mode-alist '("\\.restclient$" . restclient-mode)))

  (use-package ob-restclient
    :ensure t
    :init
    (eval-after-load "org"
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t)))))
#+end_src

**** CSS

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :config
    (add-hook 'css-mode-hook #'rainbow-mode))

  (defun iensu--setup-css ()
    (setq css-indent-offset 2)
    (emmet-mode 1)
    (rainbow-delimiters-mode 1)
    (show-paren-mode 1))

  (use-package css-mode
    :bind (:map css-mode-map
                ("C-." . company-complete-common-or-cycle))
    :config
    (add-hook 'css-mode-hook #'iensu--setup-css))
#+end_src

**** JavaScript

#+begin_src emacs-lisp
  (defun iensu/-setup-javascript ()
    (electric-indent-mode t)
    (rainbow-delimiters-mode 1)
    (smartparens-mode 1)
    (js2-mode-hide-warnings-and-errors)
    (js2-imenu-extras-mode)
    (js2-refactor-mode)
    (js2r-add-keybindings-with-prefix "C-c C-m")
    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)
    (lsp)
    (setq js-switch-indent-offset 2
          js2-basic-offset 2
          js2-highlight-level 3)
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers '(javascript-jshint)))
    (define-key js-mode-map (kbd "M-.") nil))

  (use-package js2-mode
    :mode ("\\.js\\'")
    :interpreter ("node" "nodejs")
    :config
    (add-hook 'js2-mode-hook #'iensu/-setup-javascript))

  (use-package rjsx-mode
    :mode ("\\.jsx\\'")
    :init
    (add-to-list 'magic-mode-alist '((lambda () (and (string-equal "js" (file-name-extension buffer-file-name))
                                                (string-match "^import .* from [\"']react[\"']" (buffer-string)))) . rjsx-mode))
    :config
    (add-hook 'rjsx-mode-hook (lambda ()
                                (emmet-mode)
                                (setq emmet-expand-jsx-className? t)))
    (add-hook 'rjsx-mode-hook 'iensu/-setup-javascript)
    (flycheck-add-mode 'javascript-eslint 'rjsx-mode))

  (use-package js2-refactor
    :delight js2-refactor-mode)

  (use-package xref-js2
    :defer nil)

  (use-package mocha)

  (use-package nvm)

  (use-package web-mode
    :init
    (dolist (ext (list "\\.html$" "\\.hbs$" "\\.handlebars$" "\\.jsp$" "\\.eex$" "\\.vue$" "\\.tsx$"))
      (add-to-list 'auto-mode-alist `(,ext . web-mode)))
    :config
    (setq web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-markup-indent-offset 2
          web-mode-attr-indent-offset 2
          web-mode-attr-value-indent-offset 2
          web-mode-enable-css-colorization t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight t)
    (add-hook 'web-mode-hook
              (lambda () (yas-activate-extra-mode 'js-mode)))
    (setq-default flychqeck-disabled-checkers
                  (append flycheck-disabled-checkers '(javascript-jshint)))
    (add-hook 'web-mode-hook 'emmet-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode))
#+end_src

Use =web-mode= if file is a choo template file.

#+begin_src emacs-lisp
  (add-to-list 'magic-mode-alist
               '("^const html = require.*choo/html" . web-mode))
#+end_src

**** TypeScript

#+begin_src emacs-lisp
  (defun iensu/setup-typescript ()
    (interactive)
    (tide-setup)
    (tide-hl-identifier-mode 1)
    (lsp)
    (flycheck-mode +1)
    (eldoc-mode +1)
    (company-mode +1)
    (smartparens-strict-mode 1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled)
          typescript-indent-level 2))

  (use-package typescript-mode
    :delight
    (typescript-mode "TS" :major)
    :init
    (add-to-list 'auto-mode-alist '("\\.ts$" . typescript-mode))
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    :config
    (add-hook 'typescript-mode-hook #'iensu/setup-typescript)
    (add-hook 'web-mode-hook
              (lambda ()
                (when (and buffer-file-name
                           (string-equal "tsx" (file-name-extension buffer-file-name)))
                  (iensu/setup-typescript)))))

  (use-package tide
    :delight " æ½®"
    :bind (:map tide-mode-map
                ("C-."     . company-files)
                ("M-."     . tide-jump-to-definition)
                ("M-,"     . tide-jump-back)
                ("C-c l d" . tide-documentation-at-point)
                ("C-c l l" . tide-references)
                ("C-c l e" . tide-project-errors)
                ("C-c l f" . tide-fix)
                ("C-c l n" . tide-rename-symbol)
                ("C-c l r" . tide-refactor)
                ("C-c t"   . npm-test-run-tests))
    :after (typescript-mode company flycheck web-mode)
    :config
    (add-hook 'tide-mode-hook
              (lambda ()
                (when (not (iensu/use-prettier))
                  (add-hook 'before-save-hook #'tide-format-before-save nil :local)))))
#+end_src

**** GraphQL

#+begin_src emacs-lisp
  (use-package graphql-mode)
#+end_src

*** Elm

#+begin_src emacs-lisp
  (use-package elm-mode
    :config
    (setq elm-tags-on-save t
          elm-sort-imports-on-save t
          elm-format-on-save t)
    (add-hook 'elm-mode-hook #'lsp))
#+end_src

*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("\\.md\\'"       . gfm-mode)
           ("\\.markdown\\'" . markdown-mode))
    :config
    (add-hook 'markdown-mode-hook #'iensu/text-editing-support)
    (add-hook 'gfm-mode-hook #'iensu/text-editing-support))
#+end_src

*** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package highlight-indentation
    :config
    (add-hook 'yaml-mode-hook (lambda () (highlight-indentation-mode t))))
#+end_src

*** Python

#+begin_src emacs-lisp
  (use-package elpy
    :init
    (elpy-enable))
#+end_src

*** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :bind (:map rust-mode-map
                ("C-c C-c" . rust-run))
    :config
    (add-hook 'rust-mode-hook #'lsp)
    (setq rust-format-on-save t))
#+end_src

#+begin_src emacs-lisp
  (use-package flycheck-rust
    :init
    (with-eval-after-load 'rust-mode
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+end_src

*** Terraform

#+begin_src emacs-lisp
  (defun iensu--terraform-format ()
    (when (executable-find "terraform")
      (let ((fname (buffer-file-name)))
        (when (file-exists-p fname)
            (shell-command (format "terraform fmt %s" fname))
            (revert-buffer nil t)))))

  (use-package terraform-mode
    :config
    (add-hook 'terraform-mode-hook
              (lambda ()
                (add-hook 'after-save-hook #'iensu--terraform-format nil 'local))))
#+end_src
*** Graphviz Dot Mode

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)

  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
  (define-key graphviz-dot-mode-map (kbd "C-c C-c") 'graphviz-dot-preview)
#+end_src

*** Java

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.java$" . java-mode))
  (add-hook 'java-mode-hook (lambda ()
                              (electric-pair-mode t)))

  (use-package lsp-java
    :ensure t
    :after lsp
    :init
    (add-hook 'java-mode-hook 'lsp)
    (add-hook 'java-mode-hook (lambda () (require 'dap-java)))
    :bind (:map java-mode-map
                ("C-c l f" . lsp-execute-code-action)
                ("C-c l n" . lsp-rename)
                ("C-c l F" . lsp-format-buffer)
                ("C-c l h" . lsp-symbol-highlight))
                ("C-c l i" . lsp-java-add-import))

  (use-package dap-mode
    :ensure t
    :after lsp-java
    :config
    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (tooltip-mode 1))
#+end_src
*** SQL

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.psql$" . sql-mode))
  (add-hook 'sql-mode-hook
            (lambda ()
              (when (string= (file-name-extension buffer-file-name) "psql")
                (setq-local sql-product 'postgres))))
#+end_src

** Load theme

#+begin_src emacs-lisp
  (use-package dracula-theme :ensure t)

  (when (display-graphic-p)
    (load-theme 'dracula t)
                                          ; (load-theme 'deeper-blue t)
                                          ;    (load-theme 'wombat t)
    )

  (set-face-attribute 'default nil :height 130)
  (set-face-foreground 'mode-line "black")
  (set-face-background 'mode-line "#dbffdb")
  (set-face-attribute 'show-paren-match nil
                      :background (face-background 'default)
                      :foreground "mediumspringgreen"
                      :weight 'extra-bold)
#+end_src

** Custom commands

#+begin_src emacs-lisp
  (defun iensu/open-init-file ()
    "Open my emacs configuration file."
    (interactive)
    (find-file (iensu--config-file "configuration.org")))

  (defun iensu/open-refile-file ()
    "Open refile file."
    (interactive)
    (find-file (iensu-org-file 'refile)))

  (defun iensu/duplicate-line (n)
    "Copy the current line N times and insert it below."
    (interactive "P")
    (let ((cur-pos (point)))
      (dotimes (i (prefix-numeric-value n))
        (move-beginning-of-line nil)
        (kill-line)
        (yank)
        (newline)
        (insert (string-trim-right (car kill-ring)))
        (goto-char cur-pos))))

  (defun iensu/toggle-scratch-buffer ()
    "Based on a great idea from Eric Skoglund (https://github.com/EricIO/emacs-configuration/)."
    (interactive)
    (if (string-equal (buffer-name (current-buffer))
                      "*scratch*")
        (switch-to-buffer (other-buffer))
      (switch-to-buffer "*scratch*")))

  (defun iensu/move-file (new-location)
    "Write this file to NEW-LOCATION, and delete the old one.  Copied from http://zck.me/emacs-move-file."
    (interactive (list (if buffer-file-name
                           (read-file-name "Move file to: ")
                         (read-file-name "Move file to: "
                                         default-directory
                                         (expand-file-name (file-name-nondirectory (buffer-name))
                                                           default-directory)))))
    (when (file-exists-p new-location)
      (delete-file new-location))
    (let ((old-location (buffer-file-name)))
      (write-file new-location t)
      (when (and old-location
                 (file-exists-p new-location)
                 (not (string-equal old-location new-location)))
        (delete-file old-location))))

  (defun iensu/switch-left-and-right-option-keys ()
    "Switch left and right option keys.

     On some external keyboards the left and right option keys are swapped,
     this command switches the keys so that they work as expected."
    (interactive)
    (let ((current-left  mac-option-modifier)
          (current-right mac-right-option-modifier))
      (setq mac-option-modifier       current-right
            mac-right-option-modifier current-left)))

  (defun iensu/refresh-work-calendar ()
    "Fetch Google calendar events and add the proper file tag(s)."
    (interactive)
    (org-gcal-fetch)
    (run-at-time "7 sec" nil
                 (lambda ()
                   (let ((work-calendar (iensu-org-file 'work-calendar)))
                     (save-excursion
                       (with-temp-file work-calendar
                         (insert-file-contents work-calendar)
                         (save-match-data
                           (goto-char (point-min))
                           (when (not (search-forward "#+FILETAGS:" nil t))
                             (insert (concat "#+FILETAGS: :work:\n"
                                             "\n"))))))
                     (message "Updated work calendar")))))

  (defun iensu/update-mail-in-background ()
    "Updates email in background without opening a status buffer."
    (interactive)
    (mu4e-update-mail-and-index :run-in-background))

  (defun iensu/unblock-offlineimap (&rest args)
    "Unblocks offlineimap by deleting all lock files in ~/.offlineimap"
    (interactive)
    (let* ((offlineimap-dir "~/.offlineimap")
           (lockfiles (remove-if-not (lambda (filename) (string-match-p "\\.lock$" filename))
                                     (directory-files offlineimap-dir))))
      (dolist (lockfile lockfiles)
        (delete-file (expand-file-name lockfile offlineimap-dir)))
      (message (format "Deleted %i lock files." (length lockfiles)))))

  (defun iensu/npm-test ()
    (interactive)
    (compile "npm test" t))

  (defun iensu/eshell ()
    (interactive)
    (if (projectile-project-root)
        (projectile-run-eshell)
      (eshell :new-session)))
#+end_src

** Loading private settings

#+begin_src emacs-lisp
  (load custom-file 'noerror)

  (let ((private-settings (expand-file-name "private.el" user-emacs-directory)))
    (when (file-exists-p private-settings)
      (load private-settings)))
#+end_src
