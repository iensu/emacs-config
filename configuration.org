#+startup: showeverything

* Emacs configuration

** Table of Contents                                               :TOC_3_gh:
- [[#emacs-configuration][Emacs configuration]]
  - [[#helper-functions][Helper functions]]
  - [[#custom-hooks][Custom hooks]]
  - [[#baseline-setup][Baseline setup]]
    - [[#window-configuration][Window configuration]]
  - [[#sane-editor-defaults][Sane editor defaults]]
  - [[#global-keybindings][Global keybindings]]
    - [[#setting-up-keys-for-macos][Setting up keys for macOS]]
    - [[#various-global-keybindings][Various global keybindings]]
  - [[#external-package-installation][External package installation]]
  - [[#make-it-pretty][Make it pretty]]
  - [[#utility-packages][Utility packages]]
    - [[#hydra][Hydra]]
    - [[#make-binaries-on-the-path-accessible-in-emacs][Make binaries on the =PATH= accessible in Emacs.]]
    - [[#remember-recent-files][Remember recent files.]]
    - [[#password-entry-in-minibuffer][Password entry in minibuffer]]
    - [[#editor-functionality][Editor functionality]]
    - [[#searching-and-finding-stuff][Searching and finding stuff]]
    - [[#project-management][Project management]]
    - [[#file-browsing][File browsing]]
    - [[#text-editing-tools][Text editing tools]]
    - [[#treemacs][Treemacs]]
  - [[#org-mode][Org-mode]]
    - [[#custom-variables][Custom variables]]
    - [[#helper-functions-1][Helper functions]]
    - [[#org-directory-and-file-definitions][Org directory and file definitions]]
    - [[#org-capture-configuration][Org-Capture configuration]]
    - [[#main-org-mode-configuration][Main org-mode configuration]]
    - [[#org-agenda-configuration][Org-agenda configuration]]
    - [[#add-extra-language-support-in-org-source-blocks][Add extra language support in org source blocks]]
    - [[#add-more-block-expansion-templates][Add more block expansion templates]]
    - [[#add-extra-exporting-options][Add extra exporting options]]
    - [[#customize-todo-keyword-sequence][Customize TODO keyword sequence]]
    - [[#customize-priorities][Customize PRIORITIES]]
    - [[#table-of-contents-generation][Table of contents-generation]]
    - [[#make-it-prettier][Make it prettier]]
    - [[#swedish-holidays][Swedish holidays]]
    - [[#capturing-outside-of-emacs][Capturing outside of emacs]]
    - [[#save-org-buffers-every-5-minutes][Save org buffers every 5 minutes]]
    - [[#google-calendar-integration][Google calendar integration]]
  - [[#email][Email]]
    - [[#mu4e][MU4E]]
  - [[#elfeed][Elfeed]]
  - [[#erc][ERC]]
  - [[#programming][Programming]]
    - [[#lsp-mode][LSP mode]]
    - [[#web-development][Web development]]
    - [[#javascript][JavaScript]]
    - [[#typescript][TypeScript]]
    - [[#graphql][GraphQL]]
    - [[#elm][Elm]]
    - [[#shell][Shell]]
    - [[#markdown][Markdown]]
    - [[#yaml][YAML]]
    - [[#toml][TOML]]
    - [[#python][Python]]
    - [[#rust][Rust]]
    - [[#terraform][Terraform]]
    - [[#graphviz-dot-mode][Graphviz Dot Mode]]
    - [[#java][Java]]
    - [[#scala][Scala]]
    - [[#c][C#]]
    - [[#f][F#]]
    - [[#sql][SQL]]
    - [[#docker][Docker]]
    - [[#webassembly][WebAssembly]]
  - [[#writing][Writing]]
  - [[#load-theme][Load theme]]
  - [[#custom-commands][Custom commands]]
  - [[#loading-private-settings][Loading private settings]]

** Helper functions

Define helper functions needed for the rest of the configuration

#+begin_src emacs-lisp
  (defun iensu--config-file (file)
      "Take a configuration FILE name and return the full file path."
      (expand-file-name file user-emacs-directory))

  (defun iensu--connected-to-internet-p ()
    "Return t if able to connect to the internet."
      (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                         "www.google.com")))

  (defun iensu--assign-key-bindings (key-definitions &optional keymap)
    "Assign a list of KEY-DEFINITIONS, optionally to a KEYMAP."
    (dolist (key-def key-definitions)
      (if keymap
          (define-key keymap (kbd (car key-def)) (cdr key-def))
        (global-set-key (kbd (car key-def)) (cdr key-def)))))
#+end_src

** Custom hooks

#+begin_src emacs-lisp
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme' in order to override some of the theme's settings.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
#+end_src

** Baseline setup

Load credentials and secret stuff

#+begin_src emacs-lisp
  (load-file (iensu--config-file "credentials.el"))
#+end_src

Basic configuration which does not depend on any external packages.

#+begin_src emacs-lisp
  ;;  Maximize screen real estate by disabling menu-bar, tool-bar and scroll-bar
  (mapc
   (lambda (mode)
     (when (fboundp mode)
       (funcall mode -1)))
   '(menu-bar-mode tool-bar-mode scroll-bar-mode))

  ;; Enlarge the initial frame
  (setq initial-frame-alist '((width . 120)
                              (height . 60)))

  ;; Improve displayed buffer names
  (setq-default frame-title-format "%b (%f)"
                uniquify-buffer-name-style 'post-forward
                uniquify-separator ":")

  ;; Shorter confirmation prompts
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq default-directory "~/"
        custom-file (iensu--config-file "custom.el")

        gc-cons-threshold 100000000
        max-lisp-eval-depth 2000

        inhibit-startup-message t
        ring-bell-function 'ignore
        confirm-kill-emacs 'y-or-n-p

        create-lockfiles nil
        auto-save-default nil

        backup-directory-alist `(("." . ,(iensu--config-file ".local/.saves")))
        backup-by-copying t
        delete-old-versions t
        kept-new-versions 6

        calendar-week-start-day 1

        vc-follow-symlinks t

        url-configuration-directory (iensu--config-file ".local/url")

        image-dired-dir (iensu--config-file ".local/image-dired")
        bookmark-default-file (iensu--config-file ".local/bookmarks")
        tramp-auto-save-directory (iensu--config-file ".local/tramp")

        ;; Need to setup identity using `gpg --gen-key` before using gpg
        ;; on Mac install pinentry-mac from homebrew
        ;; https://www.gnupg.org/software/pinentry/index.html
        auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc")
        epa-pinentry-mode 'loopback)

  (setq compilation-scroll-output t)
#+end_src

*** Window configuration

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (display-buffer-alist
     '(("\\*e?shell\\.*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 0))

       ("\\*[Hh]elp\\.*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 1))))
    :config
    (defun iensu/make-frame-without-minibuffer ()
      (interactive)
      (make-frame '((minibuffer . nil)
                    (mode-line-format . (" ")))))

    (defun iensu/buffer->bottom-window ()
      (interactive)
      (if (> 2 (length (window-list)))
          (message "Must have 2 or more windows in frame.")
        (let ((buffer (current-buffer)))
          (delete-window)
          (display-buffer-at-bottom buffer)))))
#+end_src

** Sane editor defaults

Set editor defaults to be more in line with expectations.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2

                fill-column 100

                require-final-newline t

                sentence-end-double-space nil

                word-wrap t
                truncate-lines t

                scroll-conservatively 0
                scroll-step 4
                next-screen-context-lines 20)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (delete-selection-mode 1)

  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)

  (defun iensu--prog-mode-hook ()
    "Defaults for programming modes"
    (subword-mode 1)
    (column-number-mode 1)
    (display-line-numbers-mode 1)
    (eldoc-mode 1)
    (show-paren-mode 1)
    (hs-minor-mode 1)
    (outline-minor-mode 1))

  ;; defaults for programming modes
  (add-hook 'prog-mode-hook #'iensu--prog-mode-hook)

  ;; Open eshell and shell buffers in popup windows
  (setq display-buffer-alist '(("\\`\\*e?shell" display-buffer-pop-up-window)))
#+end_src

Start the emacsclient server.

#+begin_src emacs-lisp
  (server-start)
#+end_src

** Global keybindings

*** Setting up keys for macOS

Set the command button to be =meta= (=M=).

#+begin_src emacs-lisp
  (setq mac-command-modifier 'meta)
#+end_src

Unset the option key (=meta= by default) to allow it to be used for typing
extra characters.

#+begin_src emacs-lisp
  (setq mac-option-modifier 'none)
#+end_src

Set the right option modifier to =hyper= which gives us more keybindings to work with.

#+begin_src emacs-lisp
  (setq mac-right-option-modifier 'hyper)
#+end_src

On macOS, remember to disable the built-in dictionary lookup command (=C-M-d=)
by running the following command followed by a restart of the computer:

#+begin_src shell :eval never
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70 '<dict><key>enabled</key><false/></dict>'
#+end_src

*** Various global keybindings

Avoid suspending frame by accident.

#+begin_src emacs-lisp
  ;; Unsets (suspend-frame) key-binding
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+end_src

Add a bunch of globally applied keybindings.

#+begin_src emacs-lisp
  (iensu--assign-key-bindings '(("C-<backspace>" . delete-indentation)
                                ("C-h C-s"       . iensu/toggle-scratch-buffer)
                                ("C-x C-b"       . ibuffer)
                                ("M-<backspace>" . fixup-whitespace)
                                ("M-i"           . imenu)
                                ("M-o"           . occur)))
#+end_src

Enable window (visible buffer) navigation with =<shift>-<direction>=.

#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

** External package installation

Setup =package.el= and =use-package= for clean package installation.

#+begin_src emacs-lisp
  ;; --- Setting up package.el
  (require 'package)

  (setq package-archives
        '(("gnu"   . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))

  (when (version< emacs-version "27")
    (package-initialize))

  ;; --- Setting up use-package.el
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t))
#+end_src

** Make it pretty

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (cursor-type '(bar . 2))
    :config
    (global-prettify-symbols-mode 1)
    (global-font-lock-mode 1)

    ;; Fix titlebar on MacOS
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearence . dark)))

  ;; --- Modeline cleanup
  (use-package delight
    :config
    (delight 'global-auto-revert-mode nil t)
    (delight 'auto-revert-mode nil t)
    (delight 'auto-fill nil t)
    (delight 'org-src-mode nil t)
    (delight 'subword-mode nil t))

  (use-package diminish
    :init
    (add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name "Eλ")))
    (add-hook 'lisp-interaction-mode (lambda () (setq mode-name "λ")))
    (add-hook 'js2-mode-hook (lambda () (setq mode-name "js2"))))

  (use-package rainbow-delimiters :delight)

  (use-package all-the-icons)
#+end_src

** Utility packages

*** Hydra

#+begin_src emacs-lisp
  (use-package hydra)
  (use-package pretty-hydra
    :after (hydra))
#+end_src

Setup global hydra.

#+begin_src emacs-lisp
    (pretty-hydra-define iensu-hydra
      (:color teal :quit-key "q" :title "Global commands")
      ("Email"
       (("e u" mu4u-update-index               "update" :exit nil)
        ("e e" mu4e                            "open email")
        ("e c" mu4e-compose-new                "write email")
        ("e s" mu4e-headers-search             "search email"))
       "Elfeed"
       (("f f" elfeed)
        ("f u" elfeed-update))
       "Org clock"
       (("c c" org-clock-in                    "start clock")
        ("c r" org-clock-in-last               "resume clock")
        ("c s" org-clock-out                   "stop clock")
        ("c g" org-clock-goto                  "goto clocked task"))
       "Utilities"
       (("d"   iensu/duplicate-line            "duplicate line" :exit nil)
        ("s"   deadgrep                        "search")
        ("t"   toggle-truncate-lines           "truncate lines")
        ("u"   revert-buffer                   "reload buffer")
        ("l"   iensu/cycle-ispell-dictionary   "change dictionary"))
       "Misc"
       (("P"   iensu/project-todo-list         "project todo list")
        ("i"   iensu/open-init-file            "open emacs config")
        ("9"   iensu/refresh-work-calendar     "update calendar"))
       "Hide/show"
       (("h h" hs-toggle-hiding "Toggle block visibility")
        ("h l" hs-hide-level "Hide all blocks at same level")
        ("h a" hs-hide-all "Hide all")
        ("h s" hs-show-all "Show all"))))

    (use-package emacs
      :bind (("C-å" . iensu-hydra/body)))
#+end_src

*** Make binaries on the =PATH= accessible in Emacs.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :custom
    (exec-path-from-shell-check-startup-files nil)
    :init
    (exec-path-from-shell-initialize))
#+end_src

*** Remember recent files.

#+begin_src emacs-lisp
  (use-package recentf
    :custom
    (recentf-max-menu-items 50)
    :config
    (recentf-load-list)
    :init
    (recentf-mode 1)
    (setq recentf-save-file "~/.emacs.d/.local/recentf"))
#+end_src

*** Password entry in minibuffer

#+begin_src emacs-lisp
  (use-package pinentry :init (pinentry-start))
#+end_src

*** Editor functionality

#+begin_src emacs-lisp
    (use-package editorconfig
      :delight
      :init
      (add-hook 'prog-mode-hook (editorconfig-mode 1))
      (add-hook 'text-mode-hook (editorconfig-mode 1)))

    (use-package multiple-cursors
      :bind
      (("M-="           . mc/edit-lines)
       ("C-S-<right>"   . mc/mark-next-like-this)
       ("C-S-<left>"    . mc/mark-previous-like-this)
       ("C-S-<mouse-1>" . mc/add-cursor-on-click))
      :custom
      (mc/list-file (iensu--config-file ".local/.mc-lists.el")))

    (use-package expand-region
      :bind
      (("C-=" . er/expand-region)
       ("C-M-=" . er/contract-region)))

    (use-package iedit)

    (use-package smartparens
      :delight
      :init
      (require 'smartparens-config)
      :bind (:map smartparens-mode-map
                  ("M-s"       . sp-unwrap-sexp)
                  ("C-<down>"  . sp-down-sexp)
                  ("C-<up>"    . sp-up-sexp)
                  ("M-<down>"  . sp-backward-down-sexp)
                  ("M-<up>"    . sp-backward-up-sexp)
                  ("C-<right>" . sp-forward-slurp-sexp)
                  ("M-<right>" . sp-forward-barf-sexp)
                  ("C-<left>"  . sp-backward-slurp-sexp)
                  ("M-<left>"  . sp-backward-barf-sexp))
      :hook ((prog-mode . smartparens-mode)
             (repl-mode . smartparens-strict-mode)
             (lisp-mode . smartparens-strict-mode)
             (emacs-lisp-mode . smartparens-strict-mode)))
#+end_src

*** Searching and finding stuff

#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src

**** Ivy and Counsel

#+begin_src emacs-lisp
  (use-package counsel
    :delight ivy-mode
    :init
    (ivy-mode 1)
    :bind (("M-x"     . counsel-M-x)
           ("C-x C-f"	. counsel-find-file)
           ("C-x C-r" . counsel-recentf)
           ("<f1> f"	. counsel-describe-function)
           ("<f1> v"	. counsel-describe-variable)
           ("<f1> l"	. counsel-find-library)
           ("<f2> i"	. counsel-info-lookup-symbol)
           ("<f2> u"	. acounsel-unicode-char)
           ("C-c k"   . counsel-ag)
           ("C-x l"   . counsel-locate)
           ("C-x b"   . ivy-switch-buffer)
           ("M-y"     . counsel-yank-pop)
           ("C-s"     . swiper-isearch)
           :map ivy-minibuffer-map
           ("M-y"     . ivy-next-line))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-use-selectable-prompt t)
    (ivy-count-format "(%d/%d) ")
    (ivy-magic-slash-non-match-action 'ivy-magic-non-match-create)
    (counsel-ag-base-command "ag --nocolor --nogroup --hidden %s")
    (ivy-display-style 'fancy)
    (ivy-re-builders-alist '((swiper . ivy--regex-plus)
                             (swiper-isearch . ivy--regex-plus)
                             (counsel-find-file . ivy--regex-plus)
                             (counsel-projectile-find-file . ivy--regex-plus)
                             (t . ivy--regex-plus))))
#+end_src

Add descriptions to candidates if available.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :delight
    :config
    (ivy-rich-mode 1))
#+end_src

Sort candidates by most recently used.

#+begin_src emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode 1))
  (use-package ivy-prescient
    :config
    (ivy-prescient-mode 1)
    (setq ivy-prescient-enable-sorting t)
    (setq ivy-prescient-enable-filtering t))
  (use-package company-prescient
    :config
    (company-prescient-mode 1))
#+end_src

*** Project management

**** VCS

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status))
    :custom
    (magit-bury-buffer-function 'quit-window))

  (use-package smerge-mode
    :ensure nil
    :bind (:map smerge-mode-map (("C-c ö" . smerge-mode-hydra/body)))
    :pretty-hydra
    ((:color teal :quit-key "q" :title "Smerge - Git conflicts")
     ("Resolving"
      (("RET" smerge-keep-current      "Keep current"          :exit nil)
       ("l"   smerge-keep-lower        "Keep lower"            :exit nil)
       ("u"   smerge-keep-upper        "Keep upper"            :exit nil)
       ("b"   smerge-keep-base         "Keep base"             :exit nil)
       ("C"   smerge-combine-with-next "Combine with next")
       ("a"   smerge-keep-all          "Keep all"              :exit nil)
       ("r"   smerge-resolve           "Resolve"))
      "Navigation"
      (("n"   smerge-next              "Next conflict"         :exit nil)
       ("p"   smerge-prev              "Previous conflict"     :exit nil)
       ("R"   smerge-refine            "Highlight differences" :exit nil))
      "Misc"
      (("E"   smerge-ediff             "Open in Ediff")))))

  ;; (use-package magit-todos
  ;;   :init
  ;;   (eval-after-load 'magit
  ;;     (magit-todos-mode)))
#+end_src

**** Projectile

#+begin_src emacs-lisp
  (defun iensu/open-project-org-file ()
    (interactive)
    (if (boundp 'iensu-org-project-file)
        (find-file iensu-org-project-file)
      (message "No org project file specified.")))
#+end_src

#+begin_src emacs-lisp
  (use-package projectile
    :delight '(:eval (let ((project-name (projectile-project-name)))
                       (if (string-equal project-name "-")
                           ""
                         (concat " [" project-name "]"))))
    :bind
    (("C-c p" . projectile-hydra/body))
    :custom
    (projectile-completion-system 'ivy)
    (projectile-cache-file (iensu--config-file ".local/projectile.cache"))
    (projectile-known-projects-file (iensu--config-file ".local/projectile-bookmarks.eld"))
    (projectile-git-submodule-command nil)
    (projectile-sort-order 'access-time)
    (projectile-globally-ignored-files '("TAGS" ".DS_Store" ".projectile"))
    :pretty-hydra
    ((:color teal :quit-key "q" :title "Project")
     ("Project"
      (("p" counsel-projectile-switch-project "open project")
       ("k" projectile-kill-buffers "close project")
       ("t" projectile-test-project "test project" :exit t)
       ("c" projectile-compile-project "compile project" :exit t))
      "Files & Buffers"
      (("f" counsel-projectile-find-file "open project file")
       ("o" iensu/open-project-org-file "open project org file")
       ("T" iensu/project-todo-list "open project TODO list")
       ("b" counsel-projectile-switch-to-buffer "open project buffer")
       ("S" projectile-save-buffers "save project buffers"))
      "Search"
      (("s" projectile-ripgrep "search")
       ("r" projectile-replace "replace literal")
       ("R" projectile-replace-regexp "replace regex"))))
    :config
    (projectile-global-mode)
    (projectile-register-project-type
     'node-npm '("package.json")
     :compile "npm run build"
     :test "npm test")
    (projectile-register-project-type
     'rust-cargo '("cargo.toml")
     :compile "cargo check"
     :test "cargo test"
     :run "cargo run")
    (projectile-register-project-type
     'java-maven '("pom.xml")
     :compile "mvn compile"
     :test "mvn test"))

  (use-package counsel-projectile :init (counsel-projectile-mode 1))

  (use-package ibuffer-projectile :after (projectile)
    :hook
    (ibuffer-mode . (lambda ()
                      (ibuffer-projectile-set-filter-groups)
                      (unless (eq ibuffer-sorting-mode 'alphabetic)
                        (ibuffer-do-sort-by-alphabetic)))))
#+end_src

*** File browsing

#+begin_src emacs-lisp
  (use-package dired+
    :load-path (lambda () (iensu--config-file "packages"))
    :custom
    (dired-listing-switches "-alGh --group-directories-first")
    (dired-dwim-target t)
    :config
    (when (executable-find "gls") ;; native OSX ls works differently then GNU ls
      (setq insert-directory-program "/usr/local/bin/gls")))
#+end_src

*** Text editing tools

#+begin_src emacs-lisp
  (use-package flyspell
    :delight
    '(:eval (concat " FlyS:" (or ispell-local-dictionary ispell-dictionary)))
    :bind
    (:map flyspell-mode-map
          ("C-:" . flyspell-popup-correct))
    :custom
    (ispell-extra-args '("--sug-mode=ultra"))
    (ispell-list-command "--list")
    (ispell-dictionary "en_US")

    :config
    (defvar iensu--language-ring nil
      "Ispell language ring used to toggle current selected ispell dictionary")

    (let ((languages '("swedish" "en_US")))
      (setq iensu--language-ring (make-ring (length languages)))
      (dolist (elem languages) (ring-insert iensu--language-ring elem)))

    (defun iensu/cycle-ispell-dictionary ()
      "Cycle through the languages defined in `iensu--language-ring'."
      (interactive)
      (let ((language (ring-ref iensu--language-ring -1)))
        (ring-insert iensu--language-ring language)
        (ispell-change-dictionary language)
        (message (format "Switched to dictionary: %s" language)))))

  (use-package flyspell-popup
    :delight
    :after (flyspell))

  (use-package synosaurus
    :delight
    :custom
    (synosaurus-backend 'synosaurus-backend-wordnet)
    (synosaurus-choose-method 'popup))

  (use-package sdcv-mode
    :delight
    :load-path (lambda () (iensu--config-file "packages")))

  (use-package emojify
    :custom
    (emojify-emojis-dir (iensu--config-file ".local/emojis")))

  (use-package emacs
    :config
    (defun iensu/configure-text-editing-tools ()
      "Enables text editing tools such as spell checking and thesaurus support"
      (interactive)
      (flyspell-mode 1)
      (synosaurus-mode 1)
      (emojify-mode 1))

    ;; for some timing-related (?) reason use-package :hook fails to load this hook
    (add-hook 'org-mode-hook #'iensu/configure-text-editing-tools)
    (add-hook 'mu4e-compose-mode-hook #'iensu/configure-text-editing-tools)
    (add-hook 'markdown-mode-hook #'iensu/configure-text-editing-tools)
    (add-hook 'gfm-mode-hook #'iensu/configure-text-editing-tools)
    (add-hook 'text-mode-hook #'iensu/configure-text-editing-tools))
#+end_src

*** Treemacs

#+begin_src emacs-lisp
  (use-package winum)

  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)
          ("C-x t w"   . treemacs-switch-workspace)))

  (use-package treemacs-magit
    :after treemacs magit)

  (use-package treemacs-projectile
    :after treemacs projectile)
#+end_src

** Org-mode

*** Custom variables

#+begin_src emacs-lisp
  (defvar iensu-org-dir)
  (defvar iensu-org-files-alist)
  (defvar iensu-org-refile-targets)
  (defvar iensu-org-agenda-files)
  (defvar iensu-org-capture-templates-alist)
  (defvar iensu-org-project-file)
#+end_src

*** Helper functions

#+begin_src emacs-lisp
  (defun iensu--org-remove-file-if-match (&rest regexes)
    "Return a list of org file entries from `iensu-org-files-alist' not matching REGEXES."
    (let ((regex (string-join regexes "\\|")))
      (cl-remove-if (lambda (file) (string-match regex file))
                    (mapcar 'cadr iensu-org-files-alist))))

  (defun iensu/org-save-buffers ()
    "Saves all org buffers."
    (interactive)
    (save-some-buffers 'no-confirm
                       (lambda ()
                         (string-match-p
                          (expand-file-name org-directory)
                          (buffer-file-name (current-buffer))))))

  (defun iensu-org-file (key)
    "Return file path for org file matching KEY. KEY must be in `iensu-org-files-alist'."
    (cadr (assoc key iensu-org-files-alist)))

  (defun iensu--org-capture-project-notes-file ()
    (concat (projectile-project-root) ".project-notes.org"))
#+end_src

*** Org directory and file definitions

#+begin_src emacs-lisp
  (setq iensu-org-dir "~/Dropbox/org")

  (setq iensu-org-files-alist
        '((futurice         "~/Dropbox/org/futurice.org")
          (work-calendar    "~/Dropbox/org/calendars/work.org")
          (ekonomi          "~/Dropbox/org/ekonomi.org.gpg")
          (journal          "~/Dropbox/org/journal.org.gpg")
          (private          "~/Dropbox/org/private.org")
          (refile           "~/Dropbox/org/refile.org")))

  (setq iensu-org-refile-targets
        (iensu--org-remove-file-if-match "calendars"
                                         "journal"
                                         "refile"))

  (setq org-archive-location "archive/%s_archive::")
#+end_src

*** Org-Capture configuration

Setup capture templates.

#+begin_src emacs-lisp
  (defun iensu--get-current-inactive-timestamp ()
    (concat "[" (format-time-string "%F %a %H:%M") "]"))

  (setq iensu-org-capture-templates-alist
        `(("t" "TODO with link" entry (file ,(iensu-org-file 'refile))
           ,(concat "* TODO %?\n"
                    "%U\n"
                    "%a")
           :empty-lines 1)

          ("T" "TODO" entry (file ,(iensu-org-file 'refile))
           ,(concat "* TODO %?\n"
                    "%U")
           :empty-lines 1)

          ("j" "Journal" entry (file+datetree ,(iensu-org-file 'journal))
           ,(concat "* %^{Titel}\n"
                    "%U, %^{Location|Stockholm, Sverige}\n\n"
                    "%?")
           :empty-lines 1)

          ("l" "Link" entry (file ,(iensu-org-file 'refile))
           ,(concat "* %? %^L %^G \n"
                    "%U")
           :prepend t)

          ("L" "Browser Link" entry (file ,(iensu-org-file 'refile))
           ,(concat "* TODO %:description\n"
                    "%U\n\n"
                    "%:link")
           :prepend t :immediate-finish t :empty-lines 1)

          ("p" "Browser Link and Selection" entry (file ,(iensu-org-file 'refile))
           ,(concat "* TODO %^{Title}\n"
                    "Source: %u, %c\n\n"
                    "#+BEGIN_QUOTE\n"
                    "%i\n"
                    "#+END_QUOTE\n\n\n%?")
           :prepend t :empty-lines 1)

          ("m" "Project note" entry (file+headline iensu--org-capture-project-notes-file "Notes")
           ,(concat "* %^{Title}\n"
                    "%U\n\n"
                    "%?")
           :empty-lines 1)

          ("n" "Project note with link" entry (file+headline iensu--org-capture-project-notes-file "Notes")
           ,(concat "* %^{Title}\n"
                    "%U\n\n"
                    "Link: %a\n\n"
                    "%?")
           :empty-lines 1)

          ("N" "Project note with link + code quote" entry (file+headline iensu--org-capture-project-notes-file "Notes")
           ,(concat "* %^{Title}\n"
                    "%U\n\n"
                    "Link: %a\n\n"
                    "#+begin_src %^{Language}\n"
                    "%i\n"
                    "#+end_src\n\n"
                    "%?")
           :empty-lines 1)

          ("b" "Book" entry (file+headline ,(iensu-org-file 'private) "Reading list")
           ,(concat "* %^{Title}"
                    " %^{Author}p"
                    " %^{Genre}p"
                    " %^{Published}p"
                    " %(org-set-property \"Added\" (iensu--get-current-inactive-timestamp))")
           :prepend t
           :empty-lines 1)))

  (setq org-capture-templates iensu-org-capture-templates-alist)
#+end_src

*** Main org-mode configuration

#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           :map org-mode-map
           ("H-."   . org-time-stamp-inactive))
    :config
    (setq org-default-notes-file (iensu-org-file 'notes))
    (setq org-directory iensu-org-dir)
    (setq org-refile-targets '((iensu-org-refile-targets :maxlevel . 10)))
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-refile-use-outline-path 'file)
    (setq org-latex-listings t)
    (setq org-cycle-separator-lines 1)
    (setq org-src-fontify-natively t)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    (setq truncate-lines t)
    (setq org-image-actual-width nil)
    (setq line-spacing 1)
    (setq outline-blank-line t)
    (setq org-adapt-indentation nil)
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-fontify-done-headline t)
    (setq org-fontify-whole-heading-line t)
    (setq org-hide-leading-stars t)
    (setq org-indent-indentation-per-level 2)
    (setq org-checkbox-hierarchical-statistics nil)
    (setq org-log-done 'time)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-html-htmlize-output-type 'css)
    (setq org-export-initial-scope 'subtree)
    (setq org-catch-invisible-edits 'show-and-error)

    (setq org-clock-in-switch-to-state "DOING")
    (setq org-log-into-drawer t)

    (org-load-modules-maybe t)
    (dolist (lang-mode '(("javascript" . js2) ("es" . es)))
      (add-to-list 'org-src-lang-modes lang-mode))
    (visual-line-mode 1))
#+end_src

*** Org-agenda configuration

#+begin_src emacs-lisp
  (require 'org-agenda)

  (setq iensu-org-agenda-files
        (iensu--org-remove-file-if-match "\\.org\\.gpg"))

  (dolist (agenda-command
           '(("z" "Two week agenda"
              ((tags-todo "-books-music-movies"
                     ((org-agenda-overriding-header "TODOs")
                      (org-agenda-prefix-format "  ")
                      (org-agenda-sorting-strategy '(priority-down deadline-up))
                      (org-agenda-max-entries 20)))
               (agenda ""
                       ((org-agenda-start-day "0d")
                        (org-agenda-span 14)
                        (org-agenda-start-on-weekday nil)))))))
    (add-to-list 'org-agenda-custom-commands agenda-command))

  (setq org-agenda-files iensu-org-agenda-files
        org-agenda-dim-blocked-tasks nil
        org-deadline-warning-days -7
        org-agenda-block-separator "")

  (plist-put org-agenda-clockreport-parameter-plist :maxlevel 6)
#+end_src

**** Project-based TODO lists

Create a TODO list based on TODO items in a project's =.project-notes.org= file.
The =org-agenda-files= variable is temporarily set the only the project notes
file and then reverted back to its previous value upon closing the TODO list buffer.

#+begin_src emacs-lisp
  (defvar iensu--project-agenda-buffer-name "*Project Agenda*")

  (defun iensu/project-todo-list ()
    (interactive)
    (let ((project-notes-file (expand-file-name ".project-notes.org"
                                                (projectile-project-root))))
      (if (file-exists-p project-notes-file)
          (progn
            (setq org-agenda-files `(,project-notes-file))
            (org-todo-list)
            (rename-buffer iensu--project-agenda-buffer-name 'unique))
        (message "Could not locate any project notes file"))))

  (defun iensu/reset-org-agenda-files ()
    (interactive)
    (when (string-equal iensu--project-agenda-buffer-name
                        (buffer-name (current-buffer)))
      (setq org-agenda-files iensu-org-agenda-files)))

  ;; Reset org-agenda-files when the project TODO list buffer is closed
  (add-hook 'kill-buffer-hook #'iensu/reset-org-agenda-files)
#+end_src

*** Add extra language support in org source blocks

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (shell . t)
                               (js . t)
                               (python . t)
                               (dot . t)))

  ;; Add support for YAML files
  (defun org-babel-execute:yaml (body params) body)

  (defun org-babel-execute:rust (body params) body)
#+end_src

*** Add more block expansion templates

#+begin_src emacs-lisp
  (let ((additional-org-templates (if (version< (org-version) "9.2")
                                      '(("ssh" "#+begin_src shell \n?\n#+end_src")
                                        ("sel" "#+begin_src emacs-lisp \n?\n#+end_src"))
                                    '(("ssh" . "src shell")
                                      ("sel" . "src emacs-lisp")
                                      ("sr"  . "src restclient")
                                      ("sR"  .  "src rust")))))
    (dolist (template additional-org-templates)
      (add-to-list 'org-structure-template-alist template)))
#+end_src

*** Add extra exporting options

#+begin_src emacs-lisp
  ;; presentations using LaTeX
  (require 'ox-beamer)
  ;; standard markdown
  (require 'ox-md)
  ;; Github-flavoured markdown
  (use-package ox-gfm
    :init
    (eval-after-load "org"
      '(require 'ox-gfm nil t)))
#+end_src

*** Customize TODO keyword sequence

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(d!)" "BLOCKED(b@/!)"
                    "|"
                    "CANCELED(C@/!)" "POSTPONED(P@/!)" "DONE(D@/!)")))

  (setq org-todo-keyword-faces
        '(("BLOCKED"   . (:foreground "#dd0066" :weight bold))
          ("CANCELED" . (:foreground "#6272a4"))
          ("POSTPONED" . (:foreground "#3388ff"))))
#+end_src

*** Customize PRIORITIES

#+begin_src emacs-lisp
  (setq org-highest-priority ?A
        org-default-priority ?D
        org-lowest-priority  ?E)
#+end_src

*** Table of contents-generation

Automatically generate Table of Contents entries for the current org file under
headings marked with a =:TOC:= tag.

#+begin_src emacs-lisp
  (use-package toc-org
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

*** Make it prettier

Make view more compact

#+begin_src emacs-lisp
  (setq org-cycle-separator-lines 0)
#+end_src

Only display one bullet per headline for a cleaner look.

#+begin_src emacs-lisp
  (use-package org-superstar
    :init
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

Clean-up agenda view

#+begin_src emacs-lisp
  (setq org-agenda-prefix-format
        '((agenda . "   %?-12t    % s")
          (todo . " %i %-12:c")
          (tags . " %i %-12:c")
          (search . " %i %-12:c")))
#+end_src

*** Swedish holidays

Update the calendar to contain Swedish holidays etc.

#+begin_src emacs-lisp
  (load-file (iensu--config-file "packages/kalender.el"))
#+end_src

*** Capturing outside of emacs

=org-protocol= enables capturing from outside of Emacs.

#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src

#+begin_src emacs-lisp
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
#+end_src

*** Save org buffers every 5 minutes

#+begin_src emacs-lisp
  (defvar iensu--timer:org-save-buffers nil
    "Org save buffers timer object. Can be used to cancel the timer.")

  (setq iensu--timer:org-save-buffers
        (run-at-time t (* 5 60) #'iensu/org-save-buffers))
#+end_src

*** Google calendar integration

Stores google calendar events to my org =work-calendar= file. Sync by running
=M-x org-gcal-sync=.

#+begin_src emacs-lisp
  (use-package org-gcal
    :init
    (setq org-gcal-token-file (iensu--config-file ".local/org-gcal/org-gcal-token")
          org-gcal-dir (iensu--config-file ".local/org-gcal/"))
    :config
    (setq org-gcal-client-id *user-gcal-client-id*
          org-gcal-client-secret *user-gcal-client-secret*
          org-gcal-file-alist `(("jens.ostlund@futurice.com" . ,(iensu-org-file 'work-calendar)))))
#+end_src


** Email

*** MU4E
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e"
    :bind (:map mu4e-view-mode-map
                ("<tab>" . shr-next-link)
                ("<backtab>" . shr-previous-link))
    :hook
    (mu4e-view-mode . visual-line-mode)
    :init
    (require 'mu4e)
    :config
    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-mu-binary "/usr/local/bin/mu")
    (setq mu4e-maildir "~/Mail")
    (setq mu4e-confirm-quit nil)
    (setq mu4e-get-mail-command "offlineimap -o")
    (setq mu4e-context-policy 'pick-first)

    ;; Configuration for viewing emails
    (setq mu4e-view-show-images t)
    (setq mu4e-show-images t)
    (setq mu4e-view-image-max-width 800)
    (setq mu4e-compose-format-flowed t)
    (setq mu4e-view-show-addresses t)
    (setq mu4e-headers-fields '((:human-date . 12)
                                (:flags . 6)
                                (:tags . 16)
                                (:from . 22)
                                (:subject)))

    ;; Configuration for composing/sending emails
    (setq user-mail-address "jens.ostlund@futurice.com")
    (setq user-full-name "Jens Östlund")
    (setq message-send-mail-function 'smtpmail-send-it)
    (setq smtpmail-debug-info t)
    (setq mu4e-sent-messages-behavior 'delete)
    (setq message-kill-buffer-on-exit t)
    (setq mu4e-compose-context-policy 'ask-if-none)

    (add-hook 'mu4e-compose-mode-hook (lambda () (auto-fill-mode -1)))

    ;; Always unblock offlineimap before fetching emails
    (advice-add 'mu4e-update-mail-and-index :before 'iensu/unblock-offlineimap)

    ;; Add email viewing modes
    (add-to-list 'mu4e-view-actions '("EWW" . iensu--mu4e-view-in-eww) t)
    (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t))

  (use-package org-mu4e :ensure nil)

  ;; sending html emails
  (use-package htmlize)
  (use-package org-mime
    :load-path (lambda () (iensu--config-file "packages"))
    :init
    (require 'org-mime)
    (setq org-mime-library 'mml)
    :config
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#E6E1DC" "#232323"))))
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))))

  (use-package shr
    :custom
    (shr-use-fonts nil)
    (shr-use-colors nil)
    (shr-max-image-proportion 0.2)
    (shr-width (current-fill-column)))
#+end_src


** Elfeed

#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (setq-default elfeed-search-filter "@1-months-ago +unread -saved")

    (defun iensu/elfeed-toggle-saved ()
      "Toggle `saved' tag on selected item(s)."
      (interactive)
      (let ((entry elfeed-show-entry))
        (if entry
            (if (elfeed-tagged-p 'saved entry)
                (elfeed-show-untag 'saved)
              (elfeed-show-tag 'saved))
          (elfeed-search-toggle-all 'saved))))

    (define-key elfeed-show-mode-map (kbd "t") 'iensu/elfeed-toggle-saved)
    (define-key elfeed-search-mode-map (kbd "t") 'iensu/elfeed-toggle-saved))
#+end_src

** ERC

#+begin_src emacs-lisp
  (use-package erc
    :ensure nil
    :bind (:map erc-mode-map
           ("RET" . nil)
           ("C-<return>" . erc-send-current-line))
    :custom
    (erc-prompt-for-password nil)
    (erc-fill-function 'erc-fill-static)
    (erc-fill-static-center 22)
    (erc-autojoin-channels-alist '(("freenode.net" "#emacs")))
    (erc-join-buffer 'bury)
    (erc-autojoin-timing 'ident)
    (erc-server-reconnect-attempts 5)
    (erc-server-reconnect-timeout 3)
    :config
    (add-to-list 'erc-modules 'spelling)
    (erc-update-modules)

    (defun iensu/erc-freenode ()
      "Connect to irc.freenode.net"
      (interactive)
      (erc :server "irc.freenode.net" :port 6667 :nick *erc-nick*)))

  (use-package erc-hl-nicks :after erc)

  (use-package erc-image :after erc)
#+end_src

** Programming

Setup auto-completion.

#+begin_src emacs-lisp
  (use-package company
    :delight
    :init (global-company-mode)
    :config
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 2)
    (setq company-selection-wrap-around t)
    (setq company-auto-complete t)
    (setq company-tooltip-align-annotations t)
    (setq company-dabbrev-downcase nil)
    (setq company-auto-complete-chars nil)
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (add-to-list 'company-backends 'company-elisp)))
    (eval-after-load 'company (company-quickhelp-mode 1)))

  (use-package company-quickhelp
    :bind (:map company-active-map
                ("M-h" . company-quickhelp-manual-begin))
    :config
    (setq company-quickhelp-delay 1))
#+end_src

Setup snippet expansions.

#+begin_src emacs-lisp
  (use-package yasnippet
    :delight yas-minor-mode
    :init
    (yas-global-mode 1)
    (setq yas-snippet-dirs (add-to-list 'yas-snippet-dirs (iensu--config-file "snippets")))
    :config
    (add-hook 'snippet-mode-hook (lambda ()
                                   (setq mode-require-final-newline nil
                                         require-final-newline nil))))
#+end_src

Setup flycheck for on the fly linting.

#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode t)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (use-package flycheck-popup-tip
    :init
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook
                 (lambda ()
                   (unless lsp-ui-mode
                     (flycheck-popup-tip-mode))))))
#+end_src

TODO highlighting.

#+begin_src emacs-lisp
  (use-package hl-todo
    :hook
    ((prog-mode . hl-todo-mode)))
#+end_src

*** LSP mode

#+begin_src emacs-lisp
  (defvar iensu-prog-run-tests-fn
    (lambda () (message "`iensu--prog-run-tests-fn' is not defined for current mode,"))
    "Function to run tests for a specific programming language mode,")

  (defvar iensu-prog-compile-project-fn
    (lambda () (message "`iensu--prog-compile-project-fn' is not defined for current mode."))
    "Function to compile a project in a specific programming language mode.")

  (use-package lsp-mode
    :commands lsp
    :bind (:map lsp-mode-map
                ("C-c l" . lsp-mode-hydra/body))
    :config
    (setq lsp-diagnostic-package :none)

    :pretty-hydra
    ((:title "LSP" :quit-key "q" :color teal)
     ("Exploration"
      (("l" lsp-find-references "list references")
       ("d" lsp-describe-thing-at-point "describe")
       ("e" lsp-treemacs-errors-list "list errors")
       ("å" flycheck-previous-error "goto previous error in buffer")
       ("ä" flycheck-next-error "goto next error in buffer ")
       ("T" lsp-goto-type-definition "find type definition"))
      "Refactoring"
      (("a" lsp-execute-code-action "execute code action")
       ("n" lsp-rename "rename symbol")
       ("i" lsp-organize-imports "organize imports"))
      "Misc"
      (("w" lsp-restart-workspace "restart LSP server")
       ("t" (funcall `,iensu-prog-run-tests-fn) "run tests")
       ("c" (funcall `,iensu-prog-compile-project-fn) "compile project")))))

  (use-package lsp-ui
    :config
    (setq lsp-ui-doc-delay 1)
    (setq lsp-ui-doc-border "violet")
    (setq lsp-ui-doc-position 'at-point)
    (setq lsp-ui-doc-use-webkit t)
    (setq lsp-ui-doc-max-width 50)
    (setq lsp-ui-sideline-delay 0.5)
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-flycheck-enable nil)
    (setq lsp-auto-guess-root nil))

  (use-package company-lsp
    :commands company-lsp)

  (use-package lsp-treemacs)

  (use-package lsp-ivy)
#+end_src

*** Web development

**** General

#+begin_src emacs-lisp
  (use-package emmet-mode
    :config
    (add-hook 'emmet-mode-hook
              (lambda ()
                (when (or (string-suffix-p ".jsx" (buffer-name))
                          (string-suffix-p ".tsx" (buffer-name)))
                  (setq emmet-expand-jsx-className? t)))))

  (use-package prettier-js
    :delight
    :after (js-mode web-mode yaml-mode)
    :hook (web-mode js2-mode yaml-mode))

  (use-package json-mode
    :mode ("\\.json$")
    :custom
    (js-indent-level 2))

  (use-package restclient
    :init
    (add-to-list 'auto-mode-alist '("\\.rest$" . restclient-mode))
    (add-to-list 'auto-mode-alist '("\\.restclient$" . restclient-mode)))

  (use-package ob-restclient
    :after (org)
    :config
    (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t))))
#+end_src

**** CSS

#+begin_src emacs-lisp
    (use-package rainbow-mode
      :hook (css-mode))

    (use-package css-mode
      :bind (:map css-mode-map
                  ("C-." . company-complete-common-or-cycle))
      :hook
      (css-mode-hook . emmet-mode)
      (css-mode-hook . rainbow-delimiters-mode)
      :custom
      (css-indent-offset 2))
#+end_src

**** Web mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.html$" "\\.hbs$" "\\.handlebars$" "\\.jsp$" "\\.eex$" "\\.vue$" "\\.tsx$" "\\.php$")
    :hook
    (web-mode . emmet-mode)
    :custom
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-markup-indent-offset 2)
    (web-mode-attr-indent-offset 2)
    (web-mode-attr-value-indent-offset 2)
    (web-mode-enable-css-colorization t)
    (web-mode-enable-current-element-highlight t)
    (web-mode-enable-current-column-highlight t)
    :config
    (add-hook 'web-mode-hook
              (lambda () (yas-activate-extra-mode 'js-mode)))
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    ;; Use web-mode for choo files
    (add-to-list 'magic-mode-alist
                 '("^const html = require.*choo/html" . web-mode)))
#+end_src

*** JavaScript

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (flycheck-disabled-checkers
     (append flycheck-disabled-checkers '(javascript-jshint))))

  (use-package js
    :ensure nil
    :custom
    (js-switch-indent-offset 2)
    :config
    (define-key js-mode-map (kbd "M-.") nil))

  (use-package js2-mode
    :mode ("\\.js\\'")
    :interpreter ("node" "nodejs")
    :custom
    (js2-basic-offset 2)
    (js2-highlight-level 3)
    :hook
    (js2-mode . electric-indent-mode)
    (js2-mode . rainbow-delimiters-mode)
    (js2-mode . smartparens-mode)
    (js2-mode . lsp)
    (js2-mode . prettier-js-mode)
    :config
    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)
    (js2-mode-hide-warnings-and-errors)
    (flycheck-add-mode 'javascript-eslint 'js2-mode))

  (use-package rjsx-mode
    :mode ("\\.jsx\\'")
    :hook
    (rjsx-mode . electric-indent-mode)
    (rjsx-mode . rainbow-delimiters-mode)
    (rjsx-mode . smartparens-mode)
    (rjsx-mode . emmet-mode)
    (rjsx-mode . lsp)
    (rjsx-mode . prettier-js-mode)
    :init
    (add-to-list 'magic-mode-alist
                 '((lambda () (and buffer-file-name
                              (string-equal "js" (file-name-extension buffer-file-name))
                              (string-match "^import .* from [\"']react[\"']" (buffer-string))))
                   . rjsx-mode))
    :config
    (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
    (add-hook 'rjsx-mode-hook (lambda () (setq emmet-expand-jsx-className? t))))

  (use-package js2-refactor
    :delight js2-refactor-mode
    :hook
    (rjsx-mode . js2-refactor-mode)
    (js2-mode . js2-refactor-mode))

  (use-package xref-js2
    :defer nil)

  (use-package mocha)

  (use-package nvm)

  (use-package add-node-modules-path
    :config
    (eval-after-load 'js2-mode
      '(add-hook 'js-mode-hook #'add-node-modules-path))
    (eval-after-load 'rjsx-mode
      '(add-hook 'js-mode-hook #'add-node-modules-path))
    (eval-after-load 'typescript-mode
      '(add-hook 'js-mode-hook #'add-node-modules-path)))
#+end_src

*** TypeScript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :delight
    (typescript-mode :major)
    :mode ("\\.ts$")
    :hook
    ;; (typescript-mode . lsp)
    (typescript-mode . prettier-js-mode)
    :custom
    (flycheck-check-syntax-automatically '(save mode-enabled))
    (typescript-indent-level 2)
    :config
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    (add-hook 'web-mode-hook
              (lambda ()
                (when (and buffer-file-name
                           (string-equal "tsx" (file-name-extension buffer-file-name)))
                  (lsp)))))

  (use-package tide
    :delight
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode))
    :bind (:map tide-mode-map
                ("C-c l" . tide-hydra/body))
    :pretty-hydra
    ((:title "Tide" :quit-key "q" :color teal)
     ("Exploration"
      (("l" tide-references "list references")
       ("d" tide-documentation-at-point "describe")
       ("e" tide-project-errors "list errors")
       ("å" flycheck-previous-error "goto previous error in buffer")
       ("ä" flycheck-next-error "goto next error in buffer "))
      "Refactoring"
      (("a" tide-fix "execute code action")
       ("n" tide-rename-symbol "rename symbol")
       ("i" tide-organize-imports "organize imports")
       ("D" tide-jsdoc-template "insert JSDOC template"))
      "Misc"
      (("w" tide-restart-server "restart LSP server"))))
    :config
    (add-hook 'tide-mode-hook (lambda () (eldoc-mode))))
#+end_src

*** GraphQL

#+begin_src emacs-lisp
  (use-package graphql-mode)
#+end_src

*** Elm

#+begin_src emacs-lisp
  (use-package elm-mode
    :config
    (setq elm-tags-on-save t
          elm-sort-imports-on-save t
          elm-format-on-save t)
    (add-hook 'elm-mode-hook #'lsp))
#+end_src

*** Shell

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (add-to-list 'auto-mode-alist '("\\.envrc$" . sh-mode)))
#+end_src

*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("\\.md\\'"       . gfm-mode)
           ("\\.markdown\\'" . markdown-mode)))

  (use-package markdown-toc)
#+end_src

*** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook
    (yaml-mode . display-line-numbers-mode)
    (yaml-mode . flyspell-mode-off))
#+end_src

#+begin_src emacs-lisp
  (use-package highlight-indentation
    :hook
    (yaml-mode . highlight-indentation-mode))
#+end_src

*** TOML

#+begin_src emacs-lisp
  (use-package toml-mode
    :mode ("\\.toml$" "_redirects$"))
#+end_src

*** Python

#+begin_src emacs-lisp
  (use-package emacs
    :hook
    (python-mode . lsp))
#+end_src

*** Rust

#+begin_src emacs-lisp
  (defun iensu--rust-mode-hook ()
    (setq-local outline-regexp "\s*//>+")
    (setq-local iensu-prog-run-tests-fn 'rust-test)
    (setq-local iensu-prog-compile-project-fn 'rust-compile))

  (use-package rust-mode
    :bind (:map rust-mode-map
                ("C-c C-c" . rust-compile))
    :hook
    (rust-mode . lsp)
    (rust-mode . iensu--rust-mode-hook)
    :config
    (setq rust-format-on-save t)
    (setq lsp-rust-clippy-preference "on")
    (setq lsp-rust-server 'rust-analyzer))
#+end_src

#+begin_src emacs-lisp
  (use-package flycheck-rust
    :after (rust-mode)
    :hook
    (flycheck-mode . flycheck-rust-setup))
#+end_src

*** Terraform

#+begin_src emacs-lisp
  (use-package terraform-mode
    :config
    (defun iensu--terraform-format ()
      (when (executable-find "terraform")
        (let ((fname (buffer-file-name)))
          (when (file-exists-p fname)
              (shell-command (format "terraform fmt %s" fname))
              (revert-buffer nil t)))))

    (add-hook 'terraform-mode-hook
              (lambda ()
                (add-hook 'after-save-hook #'iensu--terraform-format nil 'local))))
#+end_src
*** Graphviz Dot Mode

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :bind (:map graphviz-dot-mode-map
           ("C-c C-c" . graphviz-dot-preview))
    :config
    (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot)))
#+end_src

*** Java

#+begin_src emacs-lisp
  (use-package java-mode
    :ensure nil
    :mode "\\.java$"
    :hook
    (java-mode-hook . electric-pair-mode))

  (use-package lsp-java
    :after lsp
    :hook
    (java-mode . lsp)
    :init
    (require 'dap-java)
    :bind (:map java-mode-map
                ("C-c l f" . lsp-execute-code-action)
                ("C-c l n" . lsp-rename)
                ("C-c l F" . lsp-format-buffer)
                ("C-c l h" . lsp-symbol-highlight))
                ("C-c l i" . lsp-java-add-import))

  (use-package dap-mode
    :after lsp-java
    :config
    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (tooltip-mode 1))
#+end_src
*** Scala

#+begin_src emacs-lisp
  (use-package scala-mode
    :hook
    (scala-mode . lsp)
    :mode "\\.s\\(cala\\|bt\\)$")

  (use-package sbt-mode
    :commands (sbt-start sbt-command)
    :custom
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (sbt:program-options '("-Dsbt.supershell=false"))
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+end_src
*** C#

#+begin_src emacs-lisp
  (use-package csharp-mode
    :mode ("\\.cs$")
    :hook
    (csharp-mode . (lambda ()
                     (c-set-offset 'arglist-intro '+))))

  (use-package emacs
    :config
    (add-to-list 'auto-mode-alist '("\\.csproj$" . xml-mode))
    (add-to-list 'auto-mode-alist '("function.proj$" . xml-mode)))

  (use-package omnisharp
    :hook
    (csharp-mode . omnisharp-mode)
    (omnisharp-mode . eldoc-mode)
    :bind (:map omnisharp-mode-map
                ("C-c l" . omnisharp-hydra/body)
                ("M-." . omnisharp-go-to-definition))
    :pretty-hydra
    ((:title "Omnisharp" :quit-key "q" :color teal)
     ("Exploration"
      (("l" omnisharp-find-usages "list references")
       ("d" omnisharp-current-type-documentation "describe")
       ("e" omnisharp-solution-errors "list errors")
       ("o" omnisharp-show-overloads-at-point "list overloads")
       ("å" flycheck-previous-error "goto previous error in buffer")
       ("ä" flycheck-next-error "goto next error in buffer")
       ("D" omnisharp-go-to-definition-other-window "goto definition")
       ("g" omnisharp-find-implementations "goto implementations"))
      "Refactoring"
      (("a" omnisharp-run-code-action-refactorings "execute code action")
       ("n" omnisharp-rename "rename symbol")
       ("i" omnisharp-fix-usings "fix imports")
       ("f" omnisharp-code-format-entire-file "format file"))
      "Unit testing"
      (("u p" omnisharp-unit-test-at-point "run unit test under point")
       ("u b" omnisharp-unit-test-buffer "run all tests in buffer")
       ("u l" omnisharp-unit-test-last "re-run last unit test run"))
      "Misc"
      (("w" omnisharp-reload-solution "reload solution")
       ("I" omnisharp-imenu-create-index "create imenu index"))))
    :config
    (setq c-basic-offset 4)
    :init
    (eval-after-load 'company '(add-to-list 'company-backends 'company-omnisharp)))
#+end_src

*** F#

#+begin_src emacs-lisp
  (use-package fsharp-mode
    :defer t
    :hook
    (fsharp-mode . lsp)
    :mode ("\\.fs$" . fsharp-mode))

  (use-package emacs
    :config
    (add-to-list 'auto-mode-alist '("\\.fsproj$" . xml-mode)))
#+end_src

*** SQL

#+begin_src emacs-lisp
  (use-package sql-mode
    :ensure nil
    :mode "\\.psql$"
    :config
    (add-hook 'sql-mode-hook
              (lambda ()
                (when (string= (file-name-extension buffer-file-name) "psql")
                  (setq-local sql-product 'postgres)))))

#+end_src

*** Docker

https://github.com/Silex/docker.el

#+begin_src emacs-lisp
  (use-package docker)
  (use-package dockerfile-mode)
#+end_src

*** WebAssembly

#+begin_src emacs-lisp
  (use-package wat-mode
    :load-path (lambda () (iensu--config-file "packages/wat-mode")))
#+end_src


** Writing

#+begin_src emacs-lisp
  (use-package olivetti
    :defer
    :config
    (setq olivetti-body-width 0.65)
    (setq olivetti-minimum-body-width 72)
    (setq olivetti-recall-visual-line-mode-entry-state t))

  (define-minor-mode iensu/olivetti-mode
    "Olivetti-mode configuration"
    :init-value nil
    :global nil

    (if iensu/olivetti-mode
        (progn
          (olivetti-mode 1)
          (set-window-fringes (selected-window) 0 0)
          (iensu/hidden-mode-line-mode 1)
          (iensu/scroll-center-mode 1)
          (variable-pitch-mode 1)
          (global-hl-line-mode -1))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil)
      (iensu/hidden-mode-line-mode -1)
      (iensu/scroll-center-mode -1)
      (variable-pitch-mode -1)
      (global-hl-line-mode 1)))
#+end_src

#+begin_src emacs-lisp
  (define-minor-mode iensu/hidden-mode-line-mode
    "Toggle modeline visibility"
    :init-value nil
    :global nil
    (if iensu/hidden-mode-line-mode
        (setq-local mode-line-format nil)
      (kill-local-variable 'mode-line-format)
      (force-mode-line-update)))
#+end_src

#+begin_src emacs-lisp
  (define-minor-mode iensu/scroll-center-mode
    "Toggle centered line"
    :init-value nil
    :global nil
    (if iensu/scroll-center-mode
        (setq-local scroll-margin (* (frame-height) 2)
                    scroll-conservatively 0
                    maximum-scroll-margin 0.5)
      (dolist (local '(scroll-preserve-screen-position
                       scroll-conservatively
                       maximum-scroll-margin
                       scroll-margin))
        (kill-local-variable `,local))))
#+end_src


** Load theme

Load custom modeline.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (load-file (iensu--config-file "packages/iensu-modeline.el"))
    (add-hook 'after-load-theme-hook #'iensu-modeline/enable))
#+end_src

Load theme.

#+begin_src emacs-lisp
  (use-package modus-vivendi-theme
    :config
    (load-theme 'modus-vivendi t)
    (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (set-face-attribute 'font-lock-comment-delimiter-face nil :slant 'italic)
    (set-face-attribute 'default nil :font "Hack-15")
    (set-face-attribute 'fixed-pitch nil :font "Hack-15")
    (set-face-attribute 'variable-pitch nil :font "DejaVu Serif-14"))
#+end_src

** Custom commands

#+begin_src emacs-lisp
  (defun iensu/open-init-file ()
    "Open my emacs configuration file."
    (interactive)
    (find-file (iensu--config-file "configuration.org")))

  (defun iensu/open-refile-file ()
    "Open refile file."
    (interactive)
    (find-file (iensu-org-file 'refile)))

  (defun iensu/duplicate-line (n)
    "Copy the current line N times and insert it below."
    (interactive "P")
    (let ((cur-pos (point)))
      (dotimes (i (prefix-numeric-value n))
        (move-beginning-of-line nil)
        (kill-line)
        (yank)
        (newline)
        (insert (string-trim-right (car kill-ring)))
        (goto-char cur-pos))))

  (defun iensu/toggle-scratch-buffer ()
    "Based on a great idea from Eric Skoglund (https://github.com/EricIO/emacs-configuration/)."
    (interactive)
    (if (string-equal (buffer-name (current-buffer))
                      "*scratch*")
        (switch-to-buffer (other-buffer))
      (switch-to-buffer "*scratch*")))

  (defun iensu/move-file (new-location)
    "Write this file to NEW-LOCATION, and delete the old one.  Copied from http://zck.me/emacs-move-file."
    (interactive (list (if buffer-file-name
                           (read-file-name "Move file to: ")
                         (read-file-name "Move file to: "
                                         default-directory
                                         (expand-file-name (file-name-nondirectory (buffer-name))
                                                           default-directory)))))
    (when (file-exists-p new-location)
      (delete-file new-location))
    (let ((old-location (buffer-file-name)))
      (write-file new-location t)
      (when (and old-location
                 (file-exists-p new-location)
                 (not (string-equal old-location new-location)))
        (delete-file old-location))))

  (defun iensu/switch-left-and-right-option-keys ()
    "Switch left and right option keys.

     On some external keyboards the left and right option keys are swapped,
     this command switches the keys so that they work as expected."
    (interactive)
    (let ((current-left  mac-option-modifier)
          (current-right mac-right-option-modifier))
      (setq mac-option-modifier       current-right
            mac-right-option-modifier current-left)))

  (defun iensu/refresh-work-calendar ()
    "Fetch Google calendar events and add the proper file tag(s)."
    (interactive)
    (org-gcal-fetch))

  (defun iensu/update-mail-in-background ()
    "Updates email in background without opening a status buffer."
    (interactive)
    (mu4e-update-mail-and-index :run-in-background))

  (defun iensu/unblock-offlineimap (&rest args)
    "Unblocks offlineimap by deleting all lock files in ~/.offlineimap"
    (interactive)
    (let* ((offlineimap-dir "~/.offlineimap")
           (lockfiles (remove-if-not (lambda (filename) (string-match-p "\\.lock$" filename))
                                     (directory-files offlineimap-dir))))
      (dolist (lockfile lockfiles)
        (delete-file (expand-file-name lockfile offlineimap-dir)))
      (message (format "Deleted %i lock files." (length lockfiles)))))

  (defun iensu/finish-item ()
    "Sets a `Finished' property on an org-mode item. The value is the current time as an inactive timestamp."
    (interactive)
    (org-set-property "Finished" (iensu--get-current-inactive-timestamp)))

  (defun iensu/eshell ()
    (interactive)
    (if (projectile-project-root)
        (projectile-run-eshell)
      (eshell :new-session)))
#+end_src

** Loading private settings

#+begin_src emacs-lisp
  (load custom-file 'noerror)

  (let ((private-settings (expand-file-name "private.el" user-emacs-directory)))
    (when (file-exists-p private-settings)
      (load private-settings)))
#+end_src
